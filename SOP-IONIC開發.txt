[Start an App] 新增專案
  ionic start myApp tabs

  說明(執行完畢):
    Your Ionic app is ready! Follow these next steps:
    - Go to your new project: cd .\testApp
    - Run ionic serve within the app directory to see your app in the browser
    - Run ionic capacitor add to add a native iOS or Android project using Capacitor
    - Generate your app icon and splash screens using cordova-res --skip-config --copy
    - Explore the Ionic docs for components, tutorials, and more: https://ion.link/docs

[Run the App] 執行APP 
  @ 瀏覽器
    ionic serve => 開啟網頁作為APP畫面, ex. http://localhost:8100
  @ Android

[Changing Mode] 以網頁模擬特定平台畫面
  方法1. http://localhost:8100/?ionic:mode=ios <= 直接模擬IOS畫面
  方法2. <Ctrl+Shift+I> , 開啟Chrome偵錯工具 , 也能切換至特定平台畫面

[Scaffolding] 專案結構
  1.主要放在 src/app 目錄下
    src/
      app/  <=放程式碼, pages , components, services,...
      assets/  <=放APP用圖檔
      environment/
      theme/
      global.scss
      index.html
      main.ts
      polyfills.ts
      test.ts
      zone-flags.ts

[Generating New Features] 
  0.新增APP物件指令command : "ionic generate" 
  1.APP物件:
    page , component , service , module , 
    guard , class , directive , pipe
  2.可擴展任何階層, 例: portfolio/intro
  3.簡捷指令command : 
      ionic g component "portfolio/intro/AboutMe"
      ionic g page "User Detail"
  4.ionic cli 在新增物件後, 會一併更新 <router configuration>

[Developing for iOS] ionic 開發 iOS APP初始設定
  1.XCODE Setup
    1.1. "xcode-select --install" 確認command-line工具可使用
    1.2. 準備 Apple ID(Xcode » Preferences » Accounts), 設定開發團隊資訊
    1.3. 新增iOS模擬器(Window » Devices and Simulators)
  2.Cordova Setup(略過,因為對 Capacitor 而言, 不需要)
  3.Project Setup(APP佈署至iOS模擬器前的設定)
    3.1. "ionic capacitor add ios" (Generate the native project, if it does not already exist)
    3.2. 開啟 capacitor.config.json 檔, 修改 appId 屬性(Set the Package ID.)
    3.3. "ionic capacitor open ios" (Open the project in Xcode.)
    3.4. In Project navigator, select the project root to open the project editor. 
         Under the Identity section, verify that the Package ID that was set matches the Bundle Identifier.
    3.5. In the same project editor, under the Signing section, 
         ensure Automatically manage signing is enabled.
         選擇 Development Team , XCODE自動準備 provisioning and signing
  
  4.Running with XCODE(XCODE自動修正一般的 compilation and signing 問題)
    4.1. "ionic capacitor copy ios" (將IONIC APP同步至 NATIVE專案中)
    4.2. 在XCODE中, 選擇目標模擬器, 並按下執行鈕(Play Button)
  
  5.Running with the ionic CLI(此方式會自動載入最新版程式碼 Live reload)
    5.1. "ionic capacitor run ios -l --external" (模擬器執行外部程式)
    5.2. 在XCODE中, 選擇目標模擬器, 並按下執行鈕(Play Button)

  6.Debugging iOS Apps(可用 Safari 瀏覽器偵錯)
    6.1. 使用 Safari Web Inspector 進行偵錯
      => (開啟Develop選單) Safari » Preferences » Advanced » Show Develop menu in menu bar.
      => (如果APP沒列出來) Settings » Safari » Advanced » Web Inspector.
    6.2. Viewing Native Logs (檢視本地端紀錄, 查看 XCODE 的 Console)
      => (開啟Console畫面) View » Debug Area » Activate Console.

[Developing for Android] ionic 開發 Android APP初始設定
  1.Android Studio
    1.1. 保持 Android 模擬器啟動, 是比較好的方式
    1.2. 設定 Android Command Line Tools
      => 新增 %ANDROID_SDK_ROOT% 環境變數 = D:\KL_Data\Projects\AndroidSDK_Documents
      => 增加環境變數內容
        # avdmanager, sdkmanager
          %ANDROID_SDK_ROOT%\tools\bin
        # adb, logcat
          %ANDROID_SDK_ROOT%\platform-tools
        # emulator
          %ANDROID_SDK_ROOT%\emulator
          ex.以指令方式啟動模擬器 "emulator -avd Pixel_API_30_"
        # apksigner and zipalign
          %ANDROID_SDK_ROOT%\build-tools
    1.3. 新增AVD
    1.4. 設定實體 Android裝置
      => 開啟開發人員權限
      => 啟用USB debugging
      "adb devices" 列出所有可偵錯裝置

  2.Project Setup (APP佈署至 android 模擬器前的設定)
    2.1. "ionic capacitor add android" (產生原生專案)
    2.2. 開啟 capacitor.config.json 檔, 修改 appId 屬性(Set the Package ID.)

  3.Running with Capacitor
    3.1. "ionic capacitor copy android" (每次重大變更時,如新增圖片,就必須將檔案複製至原生專案中)
    3.2. 在 Android Studio 中, 選擇目標模擬器, 並按下執行鈕(Run Button)
    ====
    3.3. "ionic capacitor run android -l --host=YOUR_ID_ADDRESS" (啟動 live-reload server 即時載入 Live reload)
    3.4. 注意事項: 執行裝置 & 開發電腦 , 必須在同網路內.

  4.Debugging Android Apps
    4.1. 利用 Chrome DevTools 進行偵錯
      chrome://inspect/#devices , 在開發電腦上輸入
    4.2. Viewing Native Logs 瀏覽原生紀錄
      a.在 Android Studio 的 LogCat 頁籤可以看到紀錄
      b."adb logcat" 也能使用指令工具, 叫出LOGCAT工具

[Development Tips] 
  1.解決權限異常or錯誤(Resolving Permission Errors)
    1.1. 最佳作法：使用 node version manager 重新安裝 NodeJS and npm
      a. install nvm
      b. command -v nvm , 確認nvm是否安裝成功
      c. nvm install --lst , 下載並重裝最新版 NodeJS
      d. nvm alias default lts/* , 設定最新版 NodeJS 為預設環境
      e. node -v , 檢查 NodeJS 版本(OK , 可執行)
      
  2.更新套件(Updating dependencies)
    2.1. npm install <package-name>@<version|latest> --save , 更新套件指令
    2.2. 例: npm install @ionic/angular@latest --save
    2.3. 最佳作法：利用 CLI(command line)更新套件, 因為它會先讀取 "package-lock.json" 檔作檢查
    
  3.開發編輯器(Code Editors)
    3.1. Visual Studio Code(OK)

  4.使用偵錯器(Using a Debugger)
    4.1. 利用多數瀏覽器內的 debugger 指令, 將程式流程暫停
    例:
      function myBrokenFunction(){
        debugger;
        // do other stuff
      }


  5.改變瀏覽模式(Changing Mode , iOS or Android畫面)
    5.1. 預設, APP以瀏覽器檢視的話, Ionic 會套用 "md" mode
    5.2. 注意, IONIC會自動切換至對應版本畫面
    5.3. 限定, 若要指定以iOS畫面呈現, 網址加上 "?ionic:mode=ios" 即可
      例: http://localhost:8100/?ionic:mode=ios
    5.4. 手動切換, 
      "Ctrl+Shift+I" 開啟 Chrome DevTools, 就能切換至各種系統畫面
      "Ctrl+Shift+M" 開關 Chrome DevTools內的 上方切換BAR


  6.使用 iOS 模擬器(Using the iOS Simulators)
    6.1. "ionic cordova emulate ios -lc", 利用 Ionic CLI 呼叫 XCODE內建模擬器

  7.使用 Android 模擬器(Using the Genymotion Android Simulators)
    7.1. 相較於Android Studio 內建模擬器, Genymotion是另一個模擬器替代方案(較快,且擁有存取原生功能權限, 例:GPS or camera)

