
0.Windows OS上執行COBOL的方法(gnu_cobol)
  0.1. 學習資料來源
    >(先看這一份,還有作業可以寫) COBOL Programming Course(初階版) http://www.csis.ul.ie/cobol/
    
    >(超完整,但份量太多) GnuCOBOL Programmer’s Guide(開發人員手冊-Web版) https://devdocs.io/gnu_cobol/
    > GnuCOBOL Programmer’s Guide(開發人員手冊-PDF版) https://gnucobol.sourceforge.io/guides/GnuCOBOL%202.2%20NOV2017%20Programmers%20Guide%20(US%20Letter).pdf
    > GnuCOBOL FAQ(有參考價值) http://opencobol.add1tocobol.com/gnucobol/
    > GnuCOBOL環境說明 https://gnucobol.sourceforge.io/doc/gnucobol.pdf
    
  0.2. 模擬環境下載 & 詳細文件 https://arnoldtrembley.com/GnuCOBOL.htm
    更名：RENAME 
  
  0.3. 在Windows上安裝GNUCobol https://medium.com/@sousandrosilveira/installing-gnucobol-3-1-on-windows-1bf27c9b2280
        解壓縮至COBOL資料夾(例:D:\GnuCOBOL)後，設定下列系統參數：
          > COB_MAIN_DIR=<COBOL安裝資料夾> ex. D:\GnuCOBOL
          > COB_CONFIG_DIR=%COB_MAIN_DIR%\config
          > COB_COPY_DIR=%COB_MAIN_DIR%\copy
          > COB_CFLAGS=-I”%COB_MAIN_DIR%\include”
          > COB_LDFLAGS=-L”%COB_MAIN_DIR%\lib”
          > COB_LIBRARY_PATH=%COB_MAIN_DIR%\extras
          > PATH=;<COBOL安裝資料夾>\bin

  0.4. 利用VSCode進行COBOL開發 https://medium.com/@sousandrosilveira/programando-em-cobol-no-visual-studio-code-55a3b50fdb3c
        建議安裝VSCode的Rech相關套件
          > Rech COBOL => 開發COBOL用
          > Rech COBOL Debugger => 偵錯用
          > Rech Batch => 開發BATCH(Shell Script)用
  
  0.5. 如何執行COBOL程式
        > cobc -x -free hello.cob => 編譯COBOL程式(生出EXE檔)
        > ./hello => 執行編譯後的COBOL程式(EXE)
===============================================================================
資料來源：COBOL Programming Course(初階版) http://www.csis.ul.ie/cobol/

0.程式範例(超實用)
  http://www.csis.ul.ie/cobol/examples/default.htm#SimplePrograms

  [Beginners Programs]
  # 最短程式(DISPLAY, STOP RUN & PROGRAM-ID 兩個基本要素)
       $set sourceformat "FREE"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SHORTEST.

       PROCEDURE DIVISION.
       DisplayPrompt.
           DISPLAY "I did it.".
           stop run.

  # 使用者輸入(ACCEPT, DISPLAY, ACCEPT FROM DATE, ACCEPT FROM DAY, ACCEPT FROM TIME)
       *> $set sourceformat "FREE"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. AcceptAndDisplay.
       
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  StudentDetails.
           02  StudentId   PIC 9(7).
           02  StudentName.
               03  FirstName PIC X(8).
               03  LastName  PIC XX.
           02  CourseCode  PIC X(4).
           02  Gender  PIC X.
      
      *> YYYYMMDD
       01  CurrentDate.
           03  CurrentYear PIC 9(4).
           03  CurrentMonth PIC 99.
           03  CurrentDay  PIC 99.
      
      *> YYDDD
       01  DayOfYear.
           03  FILLER PIC 9(4).
           03  YearDay PIC 9(3).
      
      *> HHMMSSss  s = S/100
       01  CurrentTime.
           03  CurrentHour PIC 99.
           03  CurrentMinute PIC 99.
           03  FILLER PIC 9(4).

       PROCEDURE DIVISION.
       Begin.
           DISPLAY "Enter student details using template below".
           DISPLAY "Enter - ID(7),FirstName(8),LastName(2),CourseCode(4),Gender(1)".
           DISPLAY "==Please Input Your Data==".
           ACCEPT StudentDetails.
           ACCEPT CurrentDate FROM DATE YYYYMMDD.
           ACCEPT DayOfYear FROM DAY YYYYDDD.
           ACCEPT CurrentTime FROM TIME.
           DISPLAY "Name is ", FirstName SPACE LastName.
           DISPLAY "Date is " CurrentDay Space CurrentMonth Space CurrentYear.
           DISPLAY "Today is " YearDay " of the year".
           DISPLAY "The time is " CurrentHour ":" CurrentMinute.
           STOP RUN.    

  # 基本運算(ACCEPT, DISPLAY, MULTIPLY)
       
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MULTIPLIER.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  Num1 PIC 9 VALUES ZEROES.
       01  Num2 PIC 9 VALUES ZEROES.
       01  Result PIC 99 VALUES ZEROES.

       PROCEDURE DIVISION.
       BEGIN.
      *>   DISPLAY "ENTER FIRST NUMBER (1 DIGIT):" WITH NO ADVANCING.
      *>   DISPLAY + [WITH NO ADVANCING]. 表示不加換行符號; 
      *>          沒+ [WITH NO ADVANCING]. 則會自動加換行符號.
           DISPLAY "ENTER FIRST NUMBER (1 DIGIT):" WITH NO ADVANCING.
           ACCEPT Num1.
           DISPLAY "ENTER second NUMBER (1 DIGIT):" WITH NO ADVANCING.
           ACCEPT Num2.
           MULTIPLY Num1 BY Num2 GIVING Result.
           DISPLAY "Result is = ", Result.
           STOP RUN.

  [Selection and Interation]
  # 迴圈 & IF(PERFORM..TIMES, IF)
    1.注意: 放在 PERFORM..END PERFORM 區域內指令, 不用加句點(.).
    2.注意: PERFORM..END PERFORM 區域的句點(.), 放在END PERFORM.後即可.
    3.注意: IF..THEN..END-IF. 使用IF時, 要有 "THEN", 不然會錯.
  
       IDENTIFICATION DIVISION.
       PROGRAM-ID. ITERATIONIF.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  Num1 PIC 9 VALUE ZEROS.
       01  Num2 PIC 9 VALUE ZEROS.
       01  Result PIC 99 VALUE ZEROS.
       01  Operator PIC X VALUE SPACE.

       PROCEDURE DIVISION.
       Calculator.
           PERFORM 3 TIMES
               DISPLAY "Enter First Number(1 digit):" WITH NO ADVANCING
               ACCEPT Num1
               DISPLAY "Enter Second Number(1 digit):" WITH NO ADVANCING
               ACCEPT Num2
               DISPLAY "Enter Operator(+ or *):" WITH NO ADVANCING
               ACCEPT Operator
               IF Operator = "+" THEN
                 Add Num1, Num2 Giving Result
               END-IF
               IF Operator = "*" THEN
                 Multiply Num1 By Num2 Giving Result
               END-IF
               Display "Result is = ", Result
           END-PERFORM.
           STOP RUN.
       
  # 條件式(LEVEL 88 條件名稱[Condition Names], Condition, EVALUATE TRUE..WHEN..END-EVALUATE, PERFORM UNTIL NOT xx ...END-PERFORM.)
    1.LEVEL 88 條件名稱 + EVALUATE 合併使用.(範例寫法, 真的太美了..)      
    2.LEVEL 88 條件名稱, 可作為 EVALUATE WHEN 條件式使用.
    3.LEVEL 88 不用定義類別, 直接給條件值.ex. 88 Vowel VALUE "XXX"
    4.LEVEL 88 資料型態, 依上階定義為準.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. CONDITIONS.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  Char PIC X.
           88 Vowel VALUE "a", "e", "i", "o", "u".
           88 Consonant VALUE "b", "c", "d", "f", "g", "h",
                               "j" THRU "n", "p" THRU "t",
                               "v" THRU "z".
           88 Digit VALUE "0" THRU "9".
           88 ValidCharacter VALUE "a" THRU "z", "0" THRU "9".
       
       PROCEDURE DIVISION.
       Begin.
           DISPLAY "Enter lower case character or digit. No Data ends.".
           ACCEPT Char.
           PERFORM UNTIL NOT ValidCharacter
               EVALUATE TRUE
                   WHEN Vowel Display "The letter '" Char "' is a vowel."
                   WHEN Consonant DISPLAY "The letter '" Char "' is a consonant."
                   WHEN Digit DISPLAY "The letter '" Char "' is a digit."
                   WHEN OTHER
                      DISPLAY "No Match, Problems Found."
               END-EVALUATE
           END-PERFORM.
           STOP RUN.
       

  # 呼叫副程式,再返回(Type1: PERFORM <paragraph>.)
    1. 注意: PERFORM 特點 == 呼叫副程式, 副程式執行完畢, 程式流會返回呼叫處, 再往下執行.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. PERFORMFORMAT1.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       
       PROCEDURE DIVISION.
       TopLevel.
           DISPLAY "[TopLevel]-In. Starting to run program.".
           PERFORM OneLevelDown.
           DISPLAY "[TopLevel]-Back".
           STOP RUN.
       
       TwoLevelDown.
           DISPLAY "[22-TwoLevel]-In"
           PERFORM ThreeLevelDown
           DISPLAY "[22-TwoLevel]-Back".
           
       OneLevelDown.
           DISPLAY "[1-OneLevel]-In"
           PERFORM TwoLevelDown
           DISPLAY "[1-OneLevel]-Back".
           
       ThreeLevelDown.
           DISPLAY "[333-ThreeLevel]-In"
           DISPLAY "[333-ThreeLevel]-Back".

  # 執行多次(Type2: PERFORM ? TIMES .. END-PERFORM | PERFORM <paragraph-name> ? TIMES)
    
    1.用法1: PERFORM <要執行的程式段落 xx-paragraph-name> Number? TIMES
    2.用法2: PERFORM Number? TIMES <要執行的程式碼指令...> END-PERFORM.
       
       IDENTIFICATION DIVISION.
       PROGRAM-ID. PERFORMFORMAT2.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  NumOfTimes PIC 9 VALUE 5.
       
       PROCEDURE DIVISION.
       Begin.
           DISPLAY "Program Begin.".
      *>     用法1
           PERFORM 3 TIMES
               DISPLAY ">> In line Perform <<"
           END-PERFORM
           DISPLAY "Finished In line Perform".
      *>     用法2
           PERFORM OutOfLineEG NumOfTimes TIMES
           DISPLAY "Back to Program Begin. Program Stop."
           STOP RUN.
       
       OutOfLineEG.
           DISPLAY ">> Out of line Perform <<".

  # 執行結束(Type3: PERFORM UNTIL <Stop-Condition> .. END-PERFORM | PERFORM <paragraph-name> UNTIL <Stop-Condition>)  
    1. 常用於 'Process a stream of data讀檔(不定行數)', UNTIL行數結束時, 也是程式結束點.
    2. 'ON SIZE ERROR', 用於偵測數值超出上下限時.
    3. 'NOT ON SIZE ERROR', 當數值未超出上下限時.
    4. 'INITIALIZE', 用於資料項目(data-Item)設為'初始值' 或 '起始值'.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. PERFORMFORMAT3.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  IterCount PIC 99 VALUE ZEROS.
           88  MaxCountReached VALUE 99.
       01  UserInput PIC 99 VALUE ZEROS.
           88  EndOfUserInput VALUE ZEROS.
       01  RunningTotal PIC 999 VALUE ZEROS.
       01  AverageValue PIC 99 VALUE ZEROS.
       
       PROCEDURE DIVISION.
       Begin.
           PERFORM UNTIL IterCount = 5
               DISPLAY "IterCount = ", IterCount
               ADD 1 TO IterCount
           END-PERFORM
           DISPLAY "FINISH In Line Perform.".

           INITIALIZE IterCount.
           DISPLAY "After INITIALIZE, IterCount Value = " IterCount.

           DISPLAY "Enter a stream of up to 99 numbers."
           DISPLAY "Each number must be in the range 1-99. Enter 0 to stop"
           DISPLAY "Enter Number: " WITH NO ADVANCING.
           ACCEPT UserInput.
           PERFORM GetUserInput UNTIL EndOfUserInput OR MaxCountReached.

           DISPLAY "RunningTotal is ", RunningTotal.
           DISPLAY "IterCount is ", IterCount.
           COMPUTE AverageValue = RunningTotal / IterCount.
           DISPLAY "AverageValue is ", AverageValue.
           STOP RUN.

       GetUserInput.
           ADD UserInput TO RunningTotal
               ON SIZE ERROR DISPLAY "(Error): New Total is too large"
               NOT ON SIZE ERROR ADD 1 TO IterCount END-ADD
           END-ADD
           
           DISPLAY "Enter a stream of up to 99 numbers."
           DISPLAY "Each number must be in the range 1-99. Enter 0 to stop"
           DISPLAY "Enter Number: " WITH NO ADVANCING.
           ACCEPT UserInput.
       
  # 執行條件(Type4: PERFORM..VARYING..AFTER)

  # 里程計數器(Type4: PERFORM..VARYING..AFTER)


1.Introduction to COBOL
  1.1.The structure of COBOL programs
    a. COBOL is self-documenting(最大特點,它不用另外寫註解,但有比較冗長的問題)
    b. COBOL is non-proprietary (portable)
    c. COBOL is Maintainable
    d. 程式範例：兩數相加,並顯示結果
      IDENTIFICATION DIVISION.
      PROGRAM-ID. HELLO.

      DATA DIVISION.
          WORKING-STORAGE SECTION.
          01 WS-NUM1 PIC 9(5).
          01 WS-NUM2 PIC 9(5).
          01 WS-RESULT pic 9(5).
        
      PROCEDURE DIVISION.
          DISPLAY "INPUT NUM1 : ".
          ACCEPT WS-NUM1. 
          DISPLAY "INPUT NUM2 : ".
          ACCEPT WS-NUM2.
          MULTIPLY WS-NUM1 BY WS-NUM2 giving WS-RESULT.
          DISPLAY "RESULT IS : " , WS-RESULT.
          
      STOP RUN.
    e. 撰寫規則：
      |1-6|7|8-11|12-72|73-80|
      |行號區(1-6),很多編譯器可忽略
      |指示區(7) / * 表示註解 , - 表示接續 , / 表示form feed
      |Area A(8-11) => 所有的段落標示 , 都在這個區域開始 , FD AND 01 Level 數值要寫在這個區域
      |Area B(12-72) => 所有的程式碼 , 都在這個區域
    f. 命名原則：
      1.至少1個字元,最多30個字元
      2.至少1個英文字
      3.開頭及結尾不能用連字號(-)
      4.命名必須由(A-Z) , (0-9) 及 (-) 組成
      5.不能包含空白字元
      6.命名不分大小寫, total == Total = tOtAl = TOTAL
    g. 程式結構：
      Program > Division > SECTION > PARAGRAPH > Sentences > Statements
    h. 四個Divisions
      IDENTIFICATION DIVISION.
        [程式資訊]:裡面內容主要是寫給程式員看的,會被編譯器視為註解.
        唯一例外,每個COBOL PROGRAM都要有 <PROGRAM-ID.> , 而且要緊接在 <IDENTIFICATION DIVISION.> 後面.
        
      ENVIRONMENT DIVISION.
        [環境設定]:外部裝置會給定一個別名

      DATA DIVISION.
        [資料描述]:有兩個主要的Sections, 
          分別是: <FILE SECTION.> & <WORKING-STORAGE SECTION.>
          另外還有: <LINKAGE SECTION.> 在子程式(subprograms)內使用
          還有: <REPORT SECTION.> 在Report Writer based programs內使用

      PROCEDURE DIVISION.
        [程式邏輯及演算法]:是由 <SECTIONS> , <PARAGRAPHS> , <SENTENCES> , <STATEMENTS> 所組成
          1. <SECTIONS> 非必要選項,
          2. 至少要有1個<PARAGRAPHS> , <SENTENCES> , <STATEMENTS>
          3. <SECTIONS> & <PARAGRAPHS> 須符合命名規則.

          程式範例(最短):
            IDENTIFICATION DIVISION.
            PROGRAM-ID. SmallProgram.
            AUTHOR. kl.cheng

            PROCEDURE DIVISION.
            DISPLAY "hello world".
            STOP RUN.
          
          程式範例:
            IDENTIFICATION DIVISION.
            PROGRAM-ID. TEST-PROGRAM.
            AUTHOR. KL CHENG.

            DATA DIVISION.
            WORKING-STORAGE SECTION.
            01 NUM1 PIC 9 VALUE ZEROS.
            01 NUM2 PIC 9 VALUE ZEROS.
            01 RESULT PIC 99 VALUE ZEROS.

            PROCEDURE DIVISION.
            CalculateResult.
              ACCEPT NUM1.
              ACCEPT NUM2.
              MULTIPLY NUM1 BY NUM2 GIVING RESULT.
              DISPLAY "RESULT IS = " , RESULT.
              STOP RUN.
  1.2.Declaring data in COBOL
    1.2.1.Introduction => Unit aims, objectives, prerequisites and further reading.

  	1.2.2.Categories of COBOL data => Variables , Literals , Figurative Constants.
      1.Variable 資料型態只有三種：numeric (數字) , alphanumeric (text/string 英數字) , alphabetic (字母無數字)
      2.Variable 用錯 data type , 執行運算會讓程式直接掛掉.
      3.Literals 指的常數(固定值) , 無法指定一個Name.
      4.Literals 有兩種型態: 
        > String/Alphanumeric Literals (ex.  "Michael Ryan", "-123", "123.45" )
        > Numeric Literals (ex. 123, 123.45, -256, +2987 )
      5.Figurative Constants 指的是具象常數.
      6.Figurative Constants 類別有:
        > SPACE or SPACES 	        1個或多個" "空白字元
        > ZERO or ZEROS or ZEROES   1個或多個0
        > QUOTE or QUOTES 	        "" Used instead of a quotation mark
        > HIGH-VALUE or HIGH-VALUES 最大值,ex.99
        > LOW-VALUE or LOW-VALUES 	最小值,ex.00
        > ALL literal 	            ex. ALL "a" , ALL 1. Allows a ordinary literal to act as Figurative Constant


  	1.2.3.Declaring Data-Items in COBOL => 使用 PIC 宣告變數
      In this section we show how variables are declared in COBOL using the PICTURE clause.
    1.2.4.Group and Elementary Data-Items => 如何指定合適的資料階層
      This section demonstrates how record structures can be specified using an appropriate arrangement of level numbers.

===============================================================================
資料來源：https://www.tutorialspoint.com/cobol
1.Program Structure
  Program -> 
    Division -> 
      Sections -> 
        Paragraphs -> 
          Sentences(必須以.結尾) -> 
            Statements -> 
              Characters
  
  ex.
  PROCEDURE DIVISION.
  A0000-FIRST-PARA SECTION.
  FIRST-PARAGRAPH.
  ACCEPT WS-ID
  MOVE '10' TO WS-ID
  DISPLAY WS-ID.

2.COBOL 是由 <4個DIVISION> 所組成：
  Identification Division    //(1)
    PROGRAM-ID 定義程式名稱,長度為1-30
  
  Environment Division       //(2)指定INPUT & OUTPUT FILE，並由 <2個SECTION> 所組成，分別是
    CONFIGURATION SECTION.
      SOURCE-COMPUTER.       //編譯程式的系統
      OBJECT-COMPUTER.       //執行程式的系統
    INPUT-OUTPUT SECTION.
      FILE-CONTROL.          //外部資料集合(Data Sets)
      I-O CONTROL.           //檔案
  
  Data Division              //(3)定義變數的位置，由 <4個SECTIONS> 所組成,分別是
    FILE SECTION.            //檔案的資料結構(RECORD STRUCTURE)
    WORKING-STORAGE SECTION. //定義程式變數
    LOCAL-STORAGE SECTION.   //定義程式變數,跟WORKING-STORAGE相似,差別在於LOCAL-STORAGE會給初始值,在程式執行時
    LINKAGE SECTION.         //描述從外部程式接收的資料名稱

  Procedure Division         
                            //(4)包括程序邏輯 , 它會使用 DATA DIVISION 內的變數名稱
                            //在PROCEDURE DIVISION 內至少要有 1句 , STOP RUN. OR EXIT PROGRAM.
                            //STOP RUN. 用於呼叫端
                            //EXIT PROGRAM. 用於被呼叫端
                            //在PROCEDURE DIVISION 內的SECTION , 可由 Programmer 自訂
  (example. for Identification Division)
    IDENTIFICATION DIVISION.
    PROGRAM-ID. HELLO.
    PROCEDURE DIVISION.
    DISPLAY 'Welcome to COBOL Programming World'.
    STOP RUN.

  (example. for Environment Division)
    ENVIRONMENT DIVISION.
    CONFIGURATION SECTION.
      SOURCE-COMPUTER. XXX-ZOS.
      OBJECT-COMPUTER. XXX-ZOS.
    INPUT-OUTPUT SECTIONS.
      FILE-CONTROL.
      SELECT FILEN ASSIGN TO DDNAME
      ORGANIZATION IS SEQUENTIAL.

  (example. for Data Division)
    IDENTIFICATION DIVISION.
    PROGRAM-ID HELLO.

    ENVIRONMENT DIVISION.
      INPUT-OUTPUT SECTION.
      FILE-CONTROL.
      SELECT FILEN ASSIGN TO INPUT.
        ORGANIZATION IS SEQUENTIAL.
        ACCESS IS SEQUENTIAL.

    DATA DIVISION.
      FILE SECTION.
      FD FILEN
      01 NAME PIC A(25).

      WORKING-STORAGE SECTION.
      01 WS-STUDENT PIC A(30).
      01 WS-ID PIC 9(5).

      LOCAL-STORAGE SECTION.
      01 LS-CLASS PIC 9(3).

      LINKAGE SECTION.
      01 LS-ID PIC 9(5).

    PROCEDURE DIVISION.
      DISPLAY 'EXECUTING COBOL PROGRAM USING JCL'.
    
    STOP RUN.

  (example. for Procedure Division)
    IDENTIFICATION DIVISION.
    PROGRAM-ID HELLO.

    DATA DIVISION.
      WORKING-STORAGE SECTION.
      01 WS-NAME PIC A(30).
      01 WS-IS PIC 9(5) VALUE 12345.

    PROCEDURE DIVISION.
      A000-FIRST-PARA.
      DISPLAY 'HELLO WORLD.
      MOVE 'tutorialspoint' TO WS-NAME.
      DISPLAY 'MY NAME IS 'WS-NAME.
      DISPLAY 'MY ID IS 'WS-IS.

3.COBOL - BASIC SYNTAX

  CHARACTER SET(字元集合)
    1.A-Z
    2.a-Z
    3.0-9
    4.' '//空白
    5.  +
    6.  -
    7.  *
    8.  /
    9.  $
    10. ,
    11. ;
    12. .
    13. "
    14. (
    15. )
    16. > 
    17. <
    18. :
    19. '
    20. =
  
  Coding Sheet(程式碼樣式 , 撰寫定位規定)
    位置  /欄位名稱 /功能
    1-6   / 行號   / 保留給行號使用
    7     / 指示   / * 表示註解 , - 表示接續 , / 表示form feed
    8-11  / A區域  / 所有的段落標示 , 都在這個區域開始 , FD AND 01 Level 數值要寫在這個區域
    12-72 / B區域  / 所有的程式碼 , 都在這個區域
    73-80 / 識別區 / Programmer有需要時 , 可使用

    example:
    1-----78---12-----------------------------------------------------------73------
    000100 IDENTIFICATION DIVISION.                                         000100
    000200 PROGRAM-ID. HELLO.                                               000101
    000250* THIS IS A COMMIT LINE.                                          000102
    000300 PROCEDURE DIVISION.                                              000103
    000350 A000-FIRST-PARA.                                                 000104
    000400     DISPLAY "CODEING SHEET".                                     000105
    000500 STOP RUN.

4.COBOL - Data Types
  Data NAME
    Valid:
      WS-NAME
      TOTAL-STUDENTS
      A100
      100B
    Invalid:
      MOVE
      COMPUTE
      100
      100+b
  
  Level Number
    01 RECORD description entry
    02 to 49  Group and Elementary Items
    66 Rename Clause Items
    77 Items which cannot be sub-divided
    88 Condition name entry

    DATA DIVISION.
    WORKING-STORAGE SECTION.
    01 WS-NAME PIC X(25).             <--Elementary Item
    01 WS-CLASS PIC 9(2) VALUE '10'.  <--Elementary Item

    01  WS-ADDRESS.                   <-- GROUP Item
      05  WS-HOUSE-NUMBER PIC 9(3).   <-- Elementary Item
      05  WS-STREET PIC X(15).        <-- Elementary Item
      05  WS-CITY   PIC X(15).        <-- Elementary Item
      05  WS-COUNTRY PIC X(15) VALUE 'TAIWAN'.  <-- Elementary Item
  
  Picture Clause
    9 數值
    A 字元,空白
    X 英數字,特殊字元
    V implicit decimal(小數點)
    S 正負號
    P assumed decimal(假設是小數點)

    DATA DIVISION.
      WORKING-STORAGE SECTION.
      01 WS-NUM1 PIC S9(3)V9(2).              <-- +000.00
      01 WS-NUM2 PIC PPP999.                  <-- .000000
      01 WS-NUM3 PIC S9(3)V9(2) VALUE -123.45 <-- -123.45
      01 WS-NAME PIC A(6) VALUE 'ABCDEF'.     <-- ABCDEF
      01 WS-ID PIC X(5) VALUE 'A123$'.        <-- A123$
  
  VALUE Clause
    OPTIONAL Clause , 可用於 GROUP Item AND Elementary Item
    設定初值用

    DATA DIVISION.
      WORKING-STORAGE SECTION.
      01 WS-NUM1 PIC 99V9 VALUE IS 25.9.  <-- 25.9 OR 03.5 OR 00.5
      01 WS-NAME PIC A(6) VALUE 'TAIWAN'. <-- TAIWAN OR USA OR JAPAN
      01 WS-ID PIC 99 VALUE ZERO.         <-- 00

5.BASIC VERBS
  INPUT/OUTPUT VERBS
    [ACCEPT] VERBS
      ACCEPT WS-STUDENT-NAME. <--GET DATA FROM JCL , USER INPUT
      ACCEPT WS-DATE FROM SYSTEM-DATE.  <-- GET DATA FROM OS , NEED A "FROM" KEYWORD
    
    [DISPLAY] VERB
      DISPLAY WS-STUDENT-NAME.
      DISPLAY "SYSTEM DATE IS " WS-DATE.

      <SAMPLE CODE>
        IDENTIFICATION DIVISION.
        PROGRAM-ID. HELLO.

        DATA DIVISION.
          WORKING-STORAGE SECTION.
          01 WS-STUDENT-NAME PIC X(25).
          01 WS-DATE PIC X(10).
          
        PROCEDURE DIVISION.
          ACCEPT WS-STUDENT-NAME. <-- GET FROM JCL INPUT
          ACCEPT WS-DATE FROM DATE.
          DISPLAY "NAME : " WS-STUDENT-NAME.
          DISPLAY "DATE : " WS-DATE.

        STOP RUN.
    
    [INITIALIZE] VERB
      RENAME Clause 不能被初始化
      NUMERIC DATA Items 初始化後為 ZEROES.
      ALPHANUMERIC OR ALPHABETIC 初始化後為 SPACES.
      REPLACING term 以指定值作初始化

      <SAMPLE CODE>
        IDENTIFICATION DIVISION.
        PROGRAM-ID. HELLO.

        DATA DIVISION.
          WORKING-STORAGE SECTION.
          01 WS-NAME PIC A(30) VALUE 'ABCDEF'.
          01 WS-ID PIC 9(5).
          01 WS-ADDRESS.
            05  WS-HOUSE-NUMBER PIC 9(3).
            05  WS-COUNTRY PIC X(15).
            05  WS-PINCODE PIC 9(6) VALUE 123456.
            
        PROCEDURE DIVISION.
          A000-FIRST-PARA.
          INITIALIZE WS-NAME , WS-ADDRESS.  <-- WS-NAME = '30個空白' , WS-ADDRESS = 000'15個空白'000000
          INITIALIZE WS-ID REPLACING NUBERIC DATA BY 12345. <-- WS-ID = 12345

        STOP RUN.
    
    [MOVE] VERB
      COPY DATA FROM SOURCE TO DESTINATION.
      CAN BE USED BOTH <GROUP Items> AND <Elementary Items>
        FOR GROP Items , [MOVE CORRESPONDING/CORR]
      MOVE(X:L) X = 起始位置 , L = 長度

        <SAMPLE CODE>
          IDENTIFICATION DIVISION.
          PROGRAM-ID. HELLO.

          DATA DIVISION.
            WORKING-STORAGE SECTION.
            01 WS-NUM1 PIC 9(9).
            01 WS-NUM2 PIC 9(9).
            01 WS-NUM3 PIC 9(5).
            01 WS-NUM4 PIC 9(6).
            01 WS-ADDRESS. 
              05 WS-HOUSE-NUMBER PIC 9(3).
              05 WS-COUNTRY PIC X(5).
              05 WS-PINCODE PIC 9(6).
            01 WS-ADDRESS1. 
              05 WS-HOUSE-NUMBER1 PIC 9(3).
              05 WS-COUNTRY1 PIC X(5).
              05 WS-PINCODE1 PIC 9(6).

          PROCEDURE DIVISION.
            A000-FIRST-PARA.
            MOVE 123456789 TO WS-NUM1.        <-- WS-NUM1 = 123456789
            MOVE WS-NUM1 TO WS-NUM2 WS-NUM3.  <-- WS-NUM2 = 123456789 , WS-NUM3 = 56789(注意:是前面 1234 被截掉)
            MOVE WS-NUM1(3:6) TO WS-NUM4.       <-- WS-NUM4 = 345678
            MOVE 123 TO WS-HOUSE-NUMBER.      <-- WS-HOUSE-NUMBER = 123
            MOVE 'TAIWAN' TO WS-COUNTRY.      <-- WS-COUNTRY = 'TAIWA' (注意:字元 N 被截掉)
            MOVE 159753 TO WS-PINCODE.        <-- WS-PINCODE = 159753
            MOVE WS-ADDRESS TO WS-ADDRESS1.   <-- GROUP ITEM IS OK

          STOP RUN.
    
    [ADD] VERB
      加法用
      SAMPLE-1 : ADD A B TO C D.  <-- C = A+B+C , D = A+B+D
      SAMPLE-2 : ADD A B C TO D GIVING E. <-- E = A+B+C+D (注意: E 原值被加總值取代 , 不會一起加進去)
      SAMPLE-3 : ADD CORR WS-GROUP1 TO WS-GROUP2. <-- WS-GROUP2 = WS-GROUP1 + WS-GROUP2

        <SAMPLE CODE>
          IDENTIFICATION DIVISION.
          PROGRAM-ID. HELLO.

          DATA DIVISION.
            WORKING-STORAGE SECTION.
            01 WS-NUM1 PIC 9(9) VALUE 10 .
            01 WS-NUM2 PIC 9(9) VALUE 10.
            01 WS-NUM3 PIC 9(9) VALUE 10.
            01 WS-NUM4 PIC 9(9) VALUE 10.
            01 WS-NUMA PIC 9(9) VALUE 10.
            01 WS-NUMB PIC 9(9) VALUE 10.
            01 WS-NUMC PIC 9(9) VALUE 10.
            01 WS-NUMD PIC 9(9) VALUE 10.
            01 WS-NUME PIC 9(9) VALUE 10.

          PROCEDURE DIVISION.
            ADD WS-NUM1 WS-NUM2 TO WS-NUM3 WS-NUM4.  <-- WS-NUM3 = 000000030 , WS-NUM4 = 000000030
            ADD WS-NUMA WS-NUMB WS-NUMC TO WS-NUMD GIVING WS-NUME. <-- WS-NUME = 000000040

          STOP RUN.
    
    [SUBTRACT] VERB
      減法用
      SAMPLE-1 : SUBTRACT A B FROM C D.  <-- C = C-(A+B) , D = D-(A+B)
      SAMPLE-2 : SUBTRACT A B C FROM D GIVING E. <-- E = D-(A+B+C) (注意: E原值被取代 , 不會一起作運算)
      SAMPLE-3 : SUBTRACT CORR WS-GROUP1 TO WS-GROUP2. <-- WS-GROUP2 = WS-GROUP1 - WS-GROUP2

        <SAMPLE CODE>
          IDENTIFICATION DIVISION.
          PROGRAM-ID. HELLO.

          DATA DIVISION.
            WORKING-STORAGE SECTION.
            01 WS-NUM1 PIC 9(9) VALUE 10 .
            01 WS-NUM2 PIC 9(9) VALUE 10.
            01 WS-NUM3 PIC 9(9) VALUE 100.
            01 WS-NUM4 PIC 9(9) VALUE 100.
            01 WS-NUMA PIC 9(9) VALUE 10.
            01 WS-NUMB PIC 9(9) VALUE 10.
            01 WS-NUMC PIC 9(9) VALUE 10.
            01 WS-NUMD PIC 9(9) VALUE 100.
            01 WS-NUME PIC 9(9) VALUE 10.

          PROCEDURE DIVISION.
            SUBTRACT WS-NUM1 WS-NUM2 FROM WS-NUM3 WS-NUM4.  <-- WS-NUM3 = 000000080 , WS-NUM4 = 000000080
            SUBTRACT WS-NUMA WS-NUMB WS-NUMC FROM WS-NUMD GIVING WS-NUME. <-- WS-NUME = 70 = 100 - (10+10+10)

          STOP RUN.

    [MULTIPLY] VERB
      乘法用
      MULTIPLY A BY B C.        <-- B = A*B , C = A*C
      MULTIPLY A BY B GIVING E. <-- E = A*B

        <SAMPLE CODE>
          IDENTIFICATION DIVISION.
          PROGRAM-ID. HELLO.

          DATA DIVISION.
            WORKING-STORAGE SECTION.
            01 WS-NUM1 PIC 9(9) VALUE 10 .
            01 WS-NUM2 PIC 9(9) VALUE 10.
            01 WS-NUM3 PIC 9(9) VALUE 10.
            01 WS-NUMA PIC 9(9) VALUE 10.
            01 WS-NUMB PIC 9(9) VALUE 10.
            01 WS-NUMC PIC 9(9) VALUE 10.

          PROCEDURE DIVISION.
            MULTIPLY WS-NUM1 BY WS-NUM2 WS-NUM3. <-- WS-NUM2 = 000000100 , WS-NUM3 = 000000100
            MULTIPLY WS-NUMA BY WS-NUMB GIVING WS-NUMC. <-- WS-NUMC = 10 * 10 = 000000100

    [DIVIDE] VERB
      除法用
      DIVIDE A INTO B. <-- B = B/A.
      DIVIDE A BY B GIVING C REMAINDER R <-- 注意(和上面的式子不同哦): C = A / B , R = 餘數

        <SAMPLE CODE>
          IDENTIFICATION DIVISION.
          PROGRAM-ID. HELLO.

          DATA DIVISION.
            WORKING-STORAGE SECTION.
            01 WS-NUM1 PIC 9(9) VALUE 5.
            01 WS-NUM2 PIC 9(9) VALUE 250.
            01 WS-NUMA PIC 9(9) VALUE 100.
            01 WS-NUMB PIC 9(9) VALUE 15.
            01 WS-NUMC PIC 9(9).
            01 WS-REM PIC 9(9). 

          PROCEDURE DIVISION.
            DIVIDE WS-NUM1 INTO WS-NUM2. <-- WS-NUM2 = 250 / 5 = 000000050.
            DIVIDE WS-NUMA BY WS-NUMB GIVING WS-NUMC REMAINDER WS-REM. <-- WS-NUMC = 100 / 15 = 000000006 | WS-REM = 0000010

          STOP RUN.
    
    [COMPUTE] Statements
      四乘運算用 (+-*/)

        <SAMPLE CODE>
          IDENTIFICATION DIVISION.
          PROGRAM-ID. HELLO.

          DATA DIVISION.
            WORKING-STORAGE SECTION.
            01 WS-NUM1 PIC 9(9) VALUE 10 .
            01 WS-NUM2 PIC 9(9) VALUE 10.
            01 WS-NUM3 PIC 9(9) VALUE 10.
            01 WS-NUMA PIC 9(9) VALUE 50.
            01 WS-NUMB PIC 9(9) VALUE 10.
            01 WS-NUMC PIC 9(9).

          PROCEDURE DIVISION.
            COMPUTE WS-NUMC = (WS-NUM1 * WS-NUM2) - (WS-NUMA / WS-NUMB) + WS-NUM3. <-- WS-NUMC = 100 - 5 + 10 = 000000105

          STOP RUN.
