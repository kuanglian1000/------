(JAVA 考前複習重點)

==JDBC Driver安裝與設定==

	0.安裝JDBC for mysql , Oracle , SQLServer...

	1.Windows : 
		1.1. Copy <mysql-connector.jar> to C:\Program Files\Java\jdk1.6.0\jre\lib\ext 
			註:<mysql-connector.jar>檔名會有些許改變,至JDBC安裝路徑內找到最適合的 connector.jar
		1.2. copy the same file to C:\Program Files\Java\jre1.6.0\lib\ext
	
	2.go to My Computer -> Properties -> Advanced -> Environment Variables
		Set these paths
			JAVA_HOME  
			C:\Program Files\Java\jdk1.6.0

			PATH 
			C:\Program Files\Java\jdk1.6.0\bin;

			CLASSPATH
			.;C:\Program Files\Java\jre1.6.0\lib\ext\mysql-connector.jar;.;

	3.open a fresh command propmpt,type
		java -version press Enter

==JDBC設定異常排除==
	異常訊息:Caused by: com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value '?x?_?????' is unrecognized or represents more than one time zone. 
					You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specific time zone value if you want to utilize time zone support.
	解決方法:
		加入語法: useUnicode=true&characterEncoding=UTF-8
	範例：
		修改前--> spring.datasource.url=jdbc:mysql://localhost:3306/sys?serverTimezone=UTC&useSSL=false
		修改後--> spring.datasource.url=jdbc:mysql://localhost:3306/sys?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8

==資料庫存取==
	1. JDBC = JDBC應用程式開發者介面(Application Developer Interface) & JDBC驅動程式開發者介面(Driver Developer Interface)
	
	2. 應用程式要存取資料庫的話，必須是呼叫 <JDBC應用程式開發者介面>，
		import java.sql;
		import javax.sql;
	
	3. 呼叫資料庫的簡易範例
		SqlConnection conn = new SqlConnection("localhost","root","1234");
		conn.selectDB("School");
		SqlQuery query = conn.query("select * from student");
	
	4. 利用JDBC連線資料庫(主要作法)
		Connection conn = DriverManager.getConnection(...);
		Statement st = conn.createStatement();
		ResultSet rs = st.executeQuery("select * from student");

	5. 環境準備與設置
		a.安裝資料庫 & JDBC Driver (http://dev.mysql.com/downloads/connector/j/)
		b.Classpath內設定JDBC Driver (add jar/folder)
		c.連接資料庫
			> 註冊 Driver 實作物件
				1.靜態方法 DriverManager.registerDriver(new com.mysql.jdbc.Driver());
				2.動態方法 (載入Driver介面的實作類別.class檔案,就會完成註冊)，列出4種方式:
					2.1 Class.forName("com.mysql.jdbc.Driver"); //使用Class.forName()
					2.2 java.sql.Driver driver = new com.mysql.jdbc.Driver(); //自行建立Driver介面實作類別的實例
					2.3 java -D jdbc.drivers=com.mysql.jdbc.Driver;xxx.oooDriver <ProgramName> //啟動 JVM 時指定 jdbc.drivers 屬性,前例註冊 2個廠商 資料庫實例
					2.4 設定JAR檔案/META-INF/services 資料夾內，放置1個 <java.sql.Driver檔案> ,撰寫Driver介面的實作類別名稱全名,DriverManager會自動讀取檔案並註冊

			> 取得 Connection 實作物件
				1.Connection conn = DriverManager.getConnection(jdbcUrl , username , password);
				2.jdbcUrl 是由 <協定:子協定:資料來源識別> 所組成
					ex(format): jdbc:mysql://主機名稱:連接埠/資料庫名稱?參數=值&參數=值
					ex(sample): jdbc:mysql://localhost:3306/demo?user=root&password=openhome
					ex(存取中文): jdbc:mysql://localhost:3306/demo?user=root&password=123&useUnicode=true&characterEncoding=UTF8
					ex(jdbcUrl寫在XML設定檔內,&符號要用 &amp; 取代): jdbc:mysql://localhost:3306/demo?user=root&amp;password=123&amp;useUnicode=true&amp;characterEncoding=UTF8
				
			> 關閉 Connection 實作物作
				1.可使用自動關閉資源語法,來簡化寫法
					ex.
					String url = "jdbc:mysql://localhost:3306/demo";
					String user = "root";
					String password = "1234";
					try(Connection conn = DriverManager.getConnection(url,user,password))
					{
						...
					}
					catch(SQLException e)
					{
						throw new RuntimeException(e);
					}

			> 程式碼範例:連接資料庫
				import java.sql.*;
				import static java.lang.System.out;

				public class HelloDB
				{
					public static void main(String[] args) throws ClassNotFoundException,SQLException
					{
						Class.forName("com.mysql.cj.jdbc.Driver"); //1.Load DB Driver
						
						//2.Prepare Connection Parameters
						String jdbcUrl = "jdbc:mysql://localhost:3306/world?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8"; 
						//Error Resolve (For Chinese Character)--> ?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
						String user = "root";
						String password = "54878916";
						
						//3.Get Connection
						try(Connection conn = DriverManager.getConnection(jdbcUrl,user,password)) 
						{
							out.printf("DB Connection is %s " , conn.isClosed()? "closed":"opened");
						}
					}
				}
	
	==讀取檔案 how to read file data==
	import java.io.File;
	import java.io.FileNotFoundException;
	import java.util.Scanner;

	/**
	*
	* Java program to read file using Scanner class in Java.
	* java.util.Scanner is added on Java 5 and offer convenient method to read data
	*
	* @author
	*/
	public class ScannerExample {

			public static void main(String args[]) throws FileNotFoundException {
		
					//creating File instance to reference text file in Java
					File text = new File("C:/temp/test.txt"); //定義檔案物件
				
					//Creating Scanner instnace to read File in Java
					Scanner scnr = new Scanner(text); //利用Scanner去讀檔案
				
					//Reading each line of file using Scanner class
					int lineNumber = 1;
					while(scnr.hasNextLine()){
							String line = scnr.nextLine(); //一併讀入空白字元
							System.out.println("line " + lineNumber + " :" + line);
							lineNumber++;
					}       
			}   
	}

	Read more: http://java67.blogspot.com/2012/11/how-to-read-file-in-java-using-scanner-example.html#ixzz3yEaeLshv

	==Assertion==
	語法：
	1. assert <檢查結果>; 			//若檢查結果為false , 則丟出1個AssertionError(資訊模糊)
	2. assert <檢查結果> : <運算式> //若檢查結果為false , 則丟出運算式內容(明確)

	ex. assert obj != null;
	ex. assert obj != null : "the object can't be null";
	ex. assert false : "Error Condition.."

	==overloading 多載 注意事項<重點在參數>==
	1.同名方法有不同的簽名，要讓參數型別或數量不同
	2.若參數型別及數量均相同，不管方法名稱不同或傳回參數不同，都會編譯錯誤

	==陣列長度==
	int[] i = new int[5];
	int k = i.length; //取得陣列長度

	==字串長度==
	String s = "abcde";
	int i = s.length(); //取得字串長度

	1.完美數的計算要注意
		int i, j, sum = 0;
			for(i=2 ; i<= 1000 ; i++){ //<---i從2開始
				sum = 0;
				for(j=1 ; j < i ; j++){  //<---這裡不要寫錯(j<i)
					if (i % j == 0) sum += j;
				}
				if (i== sum) System.out.print(i);
			}

	2.字串格式化
		String.format(“<格式>”,Object )
		範例：
		數值轉字串，前面補0  		String.format (“%04d”, 123);  // 0123
		數值轉字串，小數點後取幾位 	String.format("%.2f",12.365) // 12.365(只能放入double型態)

	3.丟出自訂例外
		throw new RuntimeException(strMessage); //正確寫法,丟出系統預設例外類別物件

	4.Scanner的使用
		nextLine()：讀取整行
		4.1讀取輸入含空白
		4.2讀取檔案內容
		
		Scanner input = new Scanner(new File("檔案路徑")); //讀檔
		while(input.hasNextLine()){ input.nextLine();}  //讀取檔案資料
		
		Scanner input = new Scanner(System.in); //讀畫面輸入

	Math.pow 計算次方i
	Math.sqrt 計算平方根
	Math.abs 求絕對值

	5.泡泡排序法
	for(int i=0;i<ary.length-1;i++){ //要少跑1次
		for(int j=0;j<ary.length-1;j++){ //要少跑1次,才不會超出索引值
			if(ary[j]>ary[j+1]){
				temp = ary[j];
				ary[j] = ary[j+1];
				ary[j+1] = temp;
			}
		}
	}

	6.選擇排序法(假設最小數放最左側,再依序往後檢查)
	for(int i=0;i<ary.length-1;i++){     //可以少跑1次
		min = ary[i];
		for(int j=i+1;j<ary.length;j++){ //要比到最後1個
			if(ary[j]<min){
				min = ary[j];
				ary[j] = ary[i];
				ary[i] = min;
			}
		}
	}

	7.二分搜尋法
		1. 1個已排序資料,最小值索引=0,最大值索引=個數-1
		2. 每次都找出中間值索引 (minIndex + maxIndex) / 2
		3. 搜尋值與中間值比較 , 
			若小於中間值 , 則取左邊區間(最大值索引=中間值索引-1) , 重複步驟2
			若大於中間值 , 則取右邊區間(最小值索引=中間值索引+1) , 重複步驟2
			若等於中間值 , 則搜尋結束   , 結束步驟2
			若最小值索引==最大值索引 & 未找到搜尋值 , 則搜尋結束 , 結束步驟2
		
	public static void search() {
					int[] data = {5, 9, 13, 15, 17, 19, 25, 30, 45}; // 已排序資料

					System.out.print("請輸入要找尋的資料：");

					int target = keyboard.nextInt();
			int midIndex = 0 , midValue = 0 , searchCnt = 0;
			int minIndex = 0 , maxIndex = data.length-1;
			
			while(true)
			{
				searchCnt +=1; //統計搜尋次數
				midIndex = (minIndex + maxIndex)/2;
				midValue = data[midIndex];
				System.out.println("尋找區間:"+minIndex+"("+ data[minIndex] +")..."
												+maxIndex+"("+data[maxIndex]+"),"
												+"中間:"+midIndex+"("+data[midIndex]+")");
				if (midValue > target)
					maxIndex = midIndex-1;
				else if (midValue < target)
					minIndex = midIndex+1;
				else
					break; //搜尋成功條件(midValue==target)	
				if (minIndex > maxIndex) break; //最終結束條件(關鍵條件)
			}
			System.out.println("經過" + searchCnt + "次的尋找");
			if (midValue == target)
				System.out.println("您要找的資料在陣列中的第" + midIndex + "個位置");
			else
				System.out.println(target + "不在陣列中");
			}
	}

	==do while判斷式==
	至少跑1次

	do{

	}
	while(condition); //分號不要忘記了

	if condition == true 再跑1次
	if condition == false 離開迴圈

	==407.尾端遞迴計算字串的數值總和==
		static int sumTail(String s , int i){
			if(s.equals(""))
				return i;
			else
				return sumTail(s.substring(1),i+Integer.valueOf(s.substring(0,1)));
		}
		static int sumLoop(String s , int i){
			for(int j=0;j<s.length();j++){
				i += Integer.valueOf(s.substring(j,j+1));
			}
			return i;
		}

	==507.計算停車費==
		public static void park(int hours) {
					int[] hourTable = {0, 2, 4, 6};   // 時段
					int[] feeTable = {30, 50, 80, 100};   // 時段費率
					System.out.println("停車時數：" + hours + "小時");
			int fee = 0;   //停車費用
					for(int i=0;i<feeTable.length;i++){
				if (hours > hourTable[feeTable.length-1-i]){
					fee += (hours-hourTable[feeTable.length-1-i]) * feeTable[feeTable.length-1-i];
					hours = hourTable[feeTable.length-1-i];
				}
			}
					System.out.println("應繳費用：" + fee + "元整");
			}
		
		public static void park(int hours) {
					int[] hourTable = {0, 2, 4, 6};   // 時段
					int[] feeTable = {30, 50, 80, 100};   // 時段費率
					int fee = 0;   //停車費用   
			System.out.println("停車時數：" + hours + "小時");
					for(int i=hourTable.length-1 ; i>=0 ; i--){
				if ((hours - hourTable[i]) > 0) {
					fee += (hours - hourTable[i]) * feeTable[i];
					hours = hourTable[i];
				}
			}
					System.out.println("應繳費用：" + fee + "元整");
			}


	==求最大公因數(用遞迴)==
	static int gcd(int m ,int n){
			if(m == 0)
				return n;
			else if(m > n)
				return gcd(m-n,n);
			else
				return gcd(n-m,m);
	}

	==求最大公因數(用迴圈)==
	static int gcd (int m, int n) {
					int result=1;
					while (m!=0){
							if(m>n){
					result = n;
					m = m-n;
				}
				else if(m<n){
					result = m;
					n = n-m;
				}
				else{
					result = m;
					m = n-m;
				}
					}
					return result;
			}

	==銀行帳戶題型:注意==
		void buy(int price , int unitPrice){
			if (!specialAccount.freeFee()){	
				freeAccount.withdraw(price * 1.02); //再另扣手續費
			}
			else{
				freeAccount.withdraw(price); //無手續費
			}
			intUnit += (price / (double)unitPrice); //這裡要注意用double除,否則會去小數
		}
		void sell(double unit , int unitPrice){
			if (!specialAccount.freeFee())
				freeAccount.deposit(unit * unitPrice * 0.98); //扣手續費後再存入
			else
				freeAccount.deposit(unit * unitPrice);
			intUnit -= unit;
		}

	==505.反轉陣列(要轉2次)==
	public static void reverse(String[] s) {
			String[] t = new String[s.length];
			for(int i=0;i<s.length;i++){
				t[i] = s[s.length-1-i];
			}
			for(int i=0;i<s.length;i++){
				s[i] = t[i];
			}
	}

	==406.遞迴字串計算==
	public static int countA(String str) {
			if(str.equals(""))
				return 0;
			else{
				if(str.substring(0,1).equals("A"))
					return 1 + countA(str.substring(1));
				else
					return countA(str.substring(1));
			}
			}
		
	==207.三角形邊長判斷(注意:銳角三角形條件)==
			if(x<0||y<0||z<0||x+y<=z||y+z<=x||x+z<=y)
				System.out.println("不可以構成三角形");
			else{
				
				if(x2+y2<z2||x2+z2<y2||z2+y2<x2) System.out.println("鈍角三角形");
				if(x2+y2==z2||x2+z2==y2||z2+y2==x2) System.out.println("直角三角形");
				if(x2+y2>z2 && x2+z2>y2 && z2+y2>x2) System.out.println("銳角三角形"); //這裡要注意
			}
		
	==HashMap使用==
	1.產生物件 HashMap<String,FundAccount> m = new HashMap<String,FundAccount>();
	2.新增項目 m.put(key,value);
	3.取出項目 m.get(key);
	4.取值集合 m.values();
	5.取key集合 m.keySet();

	==數值轉字串==
	String.valueOf(double or integer or float);

	==字串轉數值==
	Integer.valueOf("123");

	==字串轉大寫==
	String.toUpperCase();

	==字串格式化==
	String.format("<格式>",Object )
	範例：
	數值轉字串，前面補0  		String.format (“%04d”, 123);  // 0123
	數值轉字串，小數點後取幾位 	String.format("%.2f",12.365) // 12.365(只能放入double型態)

	System.out.printf("%d 前面是整數 , 後面是浮點數 %.0f 最後是換行 %n",123,12.365);

(JAVA 基本觀念)
	==為什麼要設定JAVA變數==
	SET JAVA_HOME="C:\Program Files (x86)\Java\jdk1.8.0_65" 
	SET PATH =%PATH%;%JAVA_HOME%\bin
	SET CLASSPATH=.

	1.其實，JAVA_HOME變數不一定要有。
	2.不過，PATH變數內一定要指定javac的所在路徑，也就是 "C:\Program Files (x86)\Java\jdk1.8.0_65\bin"
	3.為什麼環境設定時,要加上classpath設定,原來是給JVM使用的；設定PATH，是給Windows找javac編譯工具用的。

	==泛型==

	好處：
	1.讓程式更安全,讓編譯器協助檢查型別的正確性,
	2.取出資料時,不用多作轉型動作

	ArrayList<String> data = new ArrayList<String>(); //這個ArrayList只能放入String物件,取出時也不用額外轉型

	==繼承==
	1.JAVA 不允許多重繼承 , 繼承多個類別(X)
	2.JAVA 允許多層繼承 , 父-->子-->孫(O)

	==基本資料 VS 物件資料(Wrapper Class)==

	int 是 基本資料
	Integer 是將基本資料包起來的類別

	==注意:Integer & Double在使用上要特別注意==
	!!如果用錯了，計算結果會天差地遠!!
	int 是整數型態,double是浮點數 , 
	例1: 3 / 2.0 = 1.5 (有小數點)
	例2: 3 / 2   = 1   (只取整數)

	==直接存取物件內的物件方法==

	//freeAccount是存在於fund物件內的物件,而balance()是freeAccount的方法
	fund.freeAccount.balance() 

	==自訂例外類別==
	class TypeErrorException extends RuntimeException{
		public TypeErrorException(String strErrorMessage){
			//System.out.println(strErrorMessage);
			super(strErrorMessage);
		}
	}

	==丟出例外-自行判斷後呼叫==

		throw new Exception(strMessage); //錯誤寫法,因為Exception是最上層類別,無法產生例外物件
		
		throw new TypeErrorException("Incorrect input data: " + strSpec); //正確寫法,丟出自訂例外類別物件
		
		throw new RuntimeException(strMessage); //正確寫法,丟出系統預設例外類別物件
		
	==抓取例外-try catch==

		try{
				while(sc.hasNextLine()){
					wh.add(sc.nextLine());
				}
			}
			catch(TypeErrorException e){
				System.out.println (e.getMessage()); //只有異常訊息
				//System.out.println (e.toString()); //例外類別:異常訊息
			}

	==抓取例外-由方法本身自動抓==

	public static void main(String args[]) throws FileNotFoundException { //<--重點在這
					Scanner sc = null;
					
			try{
				...
			}
			catch(FileNotFoundException e){  //<-- 不過,若有try...catch的話,外層會抓不到
				System.out.println("File not found!");
			}		
			}			

	==nextInt() 可連續讀取以空白分隔的數字==
	Scanner sc = new Scanner(System.in);
	int x = sc.nextInt();
	int y = sc.nextInt();
		
	==boxing 物件轉型(父轉子-強迫轉型,<<有限制>>)==

	/*錯誤轉型,因為傳入的obj是Note15,不能轉為PC*/
	PC pc = new PC();
	Note15 nt = new Note15();		
	showObjectCost(nt); //<--重點

	static void showObjectCost(Object obj)
	{
			String strType = obj.getClass().getName();
			PC pc = (PC)obj; //強制轉型
			System.out.println(strType + " Cost:" + pc.getCost());
	}

	/*成功轉型,因為傳入的obj是pc,可以轉為PC*/
	PC pc = new PC();
	Note15 nt = new Note15();		
	showObjectCost(pc); //<--重點

	static void showObjectCost(Object obj)
	{
			String strType = obj.getClass().getName();
			PC pc = (PC)obj; //強制轉型	
			System.out.println(strType + " Cost:" + pc.getCost());
	}

	==auto boxing 物件轉型(子轉父-自動轉型,但是子類別的方法會被遮蔽,除非再轉回子類別)==
	Object obj = new Object();
	PC pc = new PC();
	obj = pc; //obj指向PC()這個物件,但是只能用到obj的方法屬性


	==Reflection==
	http://godleon.blogspot.tw/2007/09/class-class-java-class-class-jvm-class.html

	==判斷Object類別及取得Object類別名稱==

	1.透過 Object裡的 getClass().getName()可以得到Object具體的類型
	2.判斷Object可用 instanceof
		if(obj instanceof String)
	如果obj是String則會回傳true，如果不是則會回傳false

	==判斷是否為子類別或介面==
	a instanceof b

	a是否為B的子類別或介面 , 結果回傳布林值

	==數值轉字串==
	String.valueOf(double or integer or float);

	==字串轉數值==
	Integer.valueOf("123");

	==字串轉大寫==
	String.toUpperCase();

	==字串格式化==
	String.format("<格式>",Object )
	範例：
	數值轉字串，前面補0  		String.format (“%04d”, 123);  // 0123
	數值轉字串，小數點後取幾位 	String.format("%.2f",12.365) // 12.365(只能放入double型態)

	System.out.printf("%d 前面是整數 , 後面是浮點數 %.0f 最後是換行 %n",123,12.365);

	==Java傳值方法==
	1. Call by Value：傳入原生型別(傳值)

	int D = 2;
	add(D);
	System.out.println(D);
	public static void add(int d)
	{
		d = d + 20;
		System.out.println(d);
	}
	執行後：D = 2(數值不變)

	2. Call by Reference ：傳入物件(傳址)，例：數值矩陣 int[] a

	int C[][] = new int[2][3];
	public static void add(int[][] iC) {
		iC[0][0] = 50;
	}
	執行後：C[0][0] = 50(傳入的物件值改變了)

(Java 科目筆記)

	1. Is a empty .java file a valid source file ? Yes

	2. Primitive variables are stored on <Stack>.

	3. Object variables are stored on <Heap>.

	4. Static functions can not be accessed using null reference . True

	5. Can type boolean compare to type int ? No. boolean only has two values , true or false. They can't be converted to integer.

	6. <Local variables>
	1.have no default value( Not assigned )
	2.Variables defined inside methods, constructors or blocks are called local variables

	7. <Instance variables>
	1.have default value , it depends on type of variable.
	2.Instance variables are declared in a class, but outside a method, constructor or any block

	7. <Class variables>
	also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block

	8. <Size of Type> : byte(8) , short(16) , int(32) , long(64) , float(32) , double(64) , char(16) , boolean(not precisely defined)

	9. <Default value of Type> : byte(0) , short(0) , int(0) , long(0L) , float(0.0f) , double(0.0d) , char('\u0000') , boolean(false) , Object(null)

	10.<protected> : 只能不能用在類別和介面，它主要的目的在於保護父類別成員只能被繼承它的子類別存取。Variables, methods and constructors which are declared protected in the superclass can be accessed only by its child class.

	它的存取權限

	11.<private> : Variables, methods and constructors which are declared private can be accessed only by the members of the same class

	11.<default> : By default, variables, methods and constructors can be accessed by any class lying in the same package.

	12.<super class> :
	12.1 Variables, methods and constructors which are declared private can be accessed only by the members of the super class.
	12.2 Variables, methods and constructors which are declared protected can be accessed by any subclass of the super class
	12.3 Variables, methods and constructors which are declared public in the superclass can be accessed by any class

	13. <Inheritance繼承>Inheritance can be defined as the process where one class acquires the properties (methods and fields) of another.

	14. <Polymorphism多形>Polymorphism is the ability of an object to take on many forms.

	15. <Abstraction抽象> It refers to the ability to make a class abstract in OOP

	16. <Encapsulation封裝> Encapsulation is the technique of making the fields in a class private and providing access to the fields via public methods

	17. <Interface介面> It is a collection of abstract methods.

	18. <類別和介面差異>
	You cannot instantiate an interface.
	An interface does not contain any constructors.
	All of the methods in an interface are abstract.
	An interface cannot contain instance fields. The only fields that can appear in an interface must be declared both static and final.
	An interface is not extended by a class; it is implemented by a class.
	An interface can extend multiple interfaces.

	19. <static binding>
	Static binding occurs during Compile time .
	Method Overloading is a sample of static binding.
	Use <type> for binding

	20. <Dynamic binding>
	Use <object> for binding
	Method Overriding is a sample of dynamic binding.

	21. <final class>
	1.class declard final is a final class
	2.Final classes are created so the methods implemented by that class cannot be overridden
	&nbsp;3.It can't be inherited

	22. <Set> : 不允許重複項目 Set is a collection of element which cannot contain duplicate elements.

	23. <TreeSet> : Sorted Order , 而非hiearchical order

	24. <JRE> : JRE is an implementation of the Java Virtual Machine which executes Java programs.

	25. <JIT> : JIT improves the runtime performance of computer programs based on bytecode

	26. <constructor建構子> :
	1. 不能被final , 可以被 private
	2. 不能被繼承inherited , 但可以被子類別覆寫
	
	27. <composition> : Holding the reference of the other class within some other class is known as composition.

	28. <how to make a thread enter the waiting state>
	1.Invoke its sleep method
	2.invoke object's wait method
	3.Invoke its suspend method

	29. <invoke thread run method>JVM invokes the thread's run method when the thread is initially executed

	30. <invoke thread yield method> Thread returns to the ready state.

	31. <Wrapper classes> These are classes that allow primitive types to be accessed as objects

	32. <runtime polymorphism> Runtime polymorphism is a process in which a call to an overridden method is resolved at runtime rather than at compile-time

	33. <LinkedList & ArrayList Speed Compare>
	1. LinkedList faster than ArrayList.
	2. ArrayList is thread safe.(舊類別大多是thread safe, 但是速度較慢)

	34. <StringBuilder & StringBuffer which is thread safe>
	StringBuffer is thread safe.

	35. <Parent of Error and Exception classes>
	Throwable

	36. <transient variable> 標註不會被序列化的變數

	37. </ , %> can result in the throwing of an ArithmeticException.

	38. <a main method without static modifier> : RunTime Error : NoSuchMethodError.

	39. <Top Level class> should be public , can not be private or protected.

	40. <If an exception occurs>, a program is expected to recover.
		可是Error發生的話，通常是難以還原的。

	1. 同一個Java檔案中，只能有1個 public class

	2.<static block>
	It is used to initialize the static data member., It is excuted before main method at the time of class loading.

	4.<每個try block後,一定要有catch block嗎？>
	沒有，但是每個try block後，至少要有catch block or finally block其中一個區塊

	5.<marker interface>
	一個沒有任何方法的介面，就是 marker interface.
	serializable is a maker interface.

	6.<Protected 存取修飾子>
	只有子類別可以存取，位於不同封裝內的子類別也可以存取.
	相同封裝內的介面也可以存取

	7.<Function Overloading覆載>
	方法具有相同名稱但不同參數項目

	8.<Runtime Polymorphism>
	Runtime Polymorphism is a process in which a call to an overridden method is resolved at runtime rather than at compile-time.指的是執行時，才會解析出哪個覆寫方法所執行的程序.

	9.<何謂 currentThread()>
	It is a Thread public static method used to obtain a reference to the current thread.
	
	10.<try catch如何決定catch執行順序>
	第1個catch clause才會被執行，其他的catch子句都會被忽略
	
	11.<Can a double value be cast to a byte ?> Yes , 可是double值可能會被截斷.

	12.何謂建構鏈(constructor chaining) 以及它如何在Java內實現？
	子類別建構子總會先建立它的父類別建構子。自動在第1個statement內加入父類別的無參數建構子

	13.覆寫override方法的限制？
	(1)子類別方法的名稱、參數、回傳型別必須與父類別相同
	(2)子類別法的存取修飾子必須和父類別相同或更開放

	14.何謂巢狀類別(nested classes)？
	定義在類別內部的類別稱之為內部類別，若存取修飾子為static，則為巢狀類別
	Nested top-level class 也就是inner class

	15.運算子優先順序(order of precedence)和執行順序(associativity , 左至右運算 OR 右至左運算)
	大部份的執行順序都是由左至右，只有 ++ , -- , ~ , ! , = 是由右至左
	優先順序為 . , (++ , -- , ~ , ! ) , ( * , / , % ) , ( + , - ) , .... , ( = )指定運算子在最後面

	16.何謂物件鎖？
	object lock flag的目的在於解決多執行緒同時存取同一物件的問題
	只有在它取得object lock flag後，執行緒才可能執行一個已標註同步化的物件方法
	synchronized(this){
	XXXX ;
	}

	17.物件導向的多形(Polymorphism)概念會用什麼方法實現？
	多載(orverloading) & 覆寫(overriding)

	18. static 方法或 static 區塊的限制為何？
	(1)不能使用"this"運算子來存取物件實體
	(2)不能使用物件屬性及物件方法，只有使用static屬性及static方法

	19.Path and Classpath的差異？
	Path and Classpath都是作業系統的變數。Path說明系統去哪找到執行檔(.EXE)，Classpath則是指定.class檔案的位置

	20.Java的enumeration
	它不是.net的列舉結構而是iterator。它負責將collections內的item依序取出使用

	21.Java的日期相關類別，只實作一個日期類別
	import java.util.GregorianCalendar;
	Calendar cal = Calendar.getInstance(); //
	System.out.printf("Today is %d/%d/%d %n",cal.get(Calendar.YEAR) , 1 + cal.get(Calendar.MONTH),cal.get(Calendar.DATE));

	22.何謂Daemon執行緒
	一個Daemon執行緒是一個在背景執行服務的執行緒(low priority thread)，例如網路伺服器傾聽連接埠的服務、隱藏的系統執行緒如垃圾收集執行緒或其它JVM 建立的執行緒，如果所有的非Daemon的執行緒都結束了，則Daemon執行緒自動就會終止。
	public class DaemonTest {
			public static void main(String[] args) {
					Thread thread = new Thread(new Runnable() {
							public void run() {
									while(true) {
											System.out.print("T");
									}
							}
					});
					thread.setDaemon(true); //設定為Daemon Thread的關鍵
					thread.start();
			}
	}

	23.如果把System.exit(0);放在try block的最後面，那finally block會被執行嗎？
	No.因為System.exit(0);執行後程式立即結束

	24.何謂Externalizable interface ?
	Externalizable is an interface which contains two methods readExternal and writeExternal. These methods give you a control over the serialization mechanism.

	25.java.lang封裝需要特別匯入import嗎 ?
	No. JVM預設會載入

	26.為什麼JAVA要用泛型呢？
	Generics provide compile-time type safety that allows programmers to catch invalid types at compile time.

	27.在用戶端及伺服器端撰寫socket須匯入的類別為何？
	import java.net.Socket;

	28.伺服器端程式執行取得埠號(port) & listen for client request須匯人類別為何？
	import java.net.ServerSocket;

	29.Java Socket優缺點.
	優點：Sockets are flexible and sufficient.(彈性和效率) Efficient socket based programming can be easily implemented for general communications.(易於使用) It cause low network traffic.(低網路傳輸量)
	缺點：Socket based communications allows only to send packets of raw data between applications.(之能傳輸raw data封包) Both the client-side and server-side have to provide mechanisms to make the data useful in any way.(用戶端和伺服器端須具備處理raw data封包的能力)

	30.What is socket ?
	提供兩台電腦間使用TCP協定進行溝通的機制

