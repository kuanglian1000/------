=考前問答=
  1. System.ApplicationException & System.SystemException 的差別 ?
    System.SystemException, 預先定義所有系統例外.
    System.ApplicationException, 預先定義應用程式例外, 程式員應該要先從這個類別衍生.
  
  2. 所有例外的基底類別是 ?
    System.Exception.

  3. 什麼是 preprocessor directives ?
    指示編譯器如何進行編譯.

  4. 什麼是 interface (介面) ?
    它像是一份契約, 定義標準結構或大綱. 繼承類別必須依循其定義結構, 進行設計.

  5. 什麼是 virtual function ?
    有一個方法希望在 繼承類別中被實作, 可以使用 virtual function.

  6. 什麼是 sealed class ?
    有一類別加上 sealed 修飾詞, 可防止其他類別繼承於該類別.
      例: class A {}
          sealed class B : A {} //B無法再被繼承.

  7. C# 如何支援 動態多形 (dynamic polymorphism)?
    透過 抽象類別(abstract class) & 虛擬方法(virtual function) 兩種方式進行實作.

  8. 什麼是 函式多載 (function overloading) ?
    同一個方法上有多種定義, 透過 {參數型態} 或 {參數個數} 等方式作區隔.

  9. 什麼是 early binding ?
    在編譯時, 就將函式與物件作連結, 又稱為 static binding.

  10. C# 如何支援 靜態多形 (static polymorphism)?
    透過 函式多載(function overloading) & 運算子多載(operator overloading) 兩種方式.

  11. 靜態多形 & 動態多形 的差別是 ?
    靜態多形: 編譯時, 就確定函式的回傳(response).
    動態多形: 執行時, 才能確定.

  12. 什麼是多形?
    一個介面, 有多種方法.

  13. C# 如何繼承/衍生?
    一個類別可由多個類別或介面衍生出來, 也就是說 它能 繼承 來自於多個基底類別/介面的 資料和函式.
  
  14. C# 支援多重繼承嗎?
    NO, 不支援多重繼承.

  15. class member 的預設存取修飾子?
    private (私有)

  16. class 的預設存取修飾子?
    internal (只開放給元件/組件間使用, 同一個DLL內使用)

  17. 什麼是列舉(Enumeration)? 
    它是1組被命名的數值常數, 視為 value data type.
    它只包含它本身的數值, 無法被繼承或繼承間傳遞.

  18. 類別(class)與結構(structure)間的差異?
    1. 類別是參考型別, 結構是值型別.
    2. 結構不支援繼承.
    3. 結構不能有預設建構子.

  19. 什麼是結構(structure) ?
    1. 結構是值型別.
    2. 讓你使用1個結構, 保留不同資料型態的相關資料.
    3. struct keyword
    4. 結構 通常用來 表示 1筆記錄(內有多個不同資料型態的值).

  20. 如何反序排列 陣列?
    1. 先用 Array.sort(array);
    2. 再用 Array.reverse(array);

  21. 如何正序排列 陣列?
    用 Array.sort(array);

  22. 所有 陣列的 基底類別是?
    Array.
    它被定義在 System 命名空間內.

  21. Can you pass additional type of parameters after using params in function definition?
    不行
  
  22. Can you create a function in C# which can accept varying number of arguments?
    可以, 利用 params 關鍵字, 可讓 1個參數傳入多個值.

  23. ?? 的用法?
    if (val1 ?? val2)
    if val1 is null , return val2.
    if val1 is not null , return val1.
   
  24. 什麼是 nullable type?
    除了原本資料型態值外, 亦能指定為 null
    例: Nullable<Int32> money, 可指定 null or -2,147,483,648 to 2,147,483,647.
    例: Nullable<bool> weather, 可指定 true or false or null.
  
  25. What is scope of a {Protected Internal} member variable of a C# class?
    相同組件內的 別的類別物件都 {無法存取}, 除了子類別可以外.

  26. What is scope of a {Internal} member variable of a C# class?
    相同組件內的 別的類別物件 都{能存取}

  27. What is scope of a {protected} member variable of a C# class?
    只有子類別能存取
  
  28. What is scope of a {private} member variable of a C# class?
    只有在同類別同函式內能存取.

  29. What is scope of a public member variable of a C# class?
    完全開放

  30. What is the purpose of an {access specifier} in C#?
    定義類別成員的範圍及可視性.

  31. C#內, 如何實作封裝(encapsulation) ?
    利用存取修飾子 (access specifier)

  32. 什麼是封裝(encapsulation)?
    避免被存取

  33. C#內, as 運算子的用法?
    轉型失敗時, 不會產生例外的作法.
    Object obj = new StringReader("Hello");
    StringReader r = obj as StringReader;

  34. C#內, is 運算子的用法?
    檢查物件是否為特定型態.
    if (Ford is Car)

  35. 什麼是 指標型態?
    type* identifier.
    char* cptr;

  36. dynamic type variable & object type variable的差異?
    object type variable, 編譯時確定.
    dynamic type variable, 執行時才確定.

  37. 什麼是 dynamic type variable?
    dynamic d = 20; //執行時才確定.

  38. unboxing 
    物件型態 轉為 值型態.

  39. boxing
    值型態 轉為 物件型態.

  40. 所有資料型態的基底類別?
    Object Type = reference type + value type +....
  
  41. What is the difference between ref and out parameters?
    ref 改變記憶體位置.
    out 把值傳出.

  42. 可否1次回傳多個值?
    可以, 利用 output parameter.
    return 只能回傳單1值.

  43. In how many ways you can pass parameters to a method?
    value parameter.
    reference parameter.
    output parameter.

=匿名類型(annoymous type)=
  1. 一組{唯讀屬性}封裝成一個物件，而不需要事先明確定義類型.
  2. 也可利用 new + 物件初始化運算式, 產生 匿名型別.
      範例:
        var sun = new { Temperater = 30, Message = "hot" };
  3. 最常見的用法: 使用其他類型的屬性, 來初始化匿名類型.
      範例:
        var productQuery = 
            from prod in products
            select new { prod.Color, prod.Price };

        foreach(var v in productQuery)
        {
          Console.WriteLine($"Color={v.Color}, Price={v.Price}");
        }
  4. 匿名類型項目的陣列
      範例:
        var annoyArray = new[] { new {name = "Apple", price = 10}, new {name="banana", price = 5} };

=泛型(Generic)=
  1. 泛型 帶進 [型別參數] 的概念
  2. 在設計方法時, 延遲型別規格, 直到用戶碼程式碼實體/物件化為止.
  3. 使用泛型型別參數 T, 可供其他用戶程式使用 自訂類別, 而不會產生 {執行時間轉換} 或 {裝箱作業} 的成本及風險

  4. 泛型範例
    public class GenericList<T>
    {
      public void Add(T input){ }
    }
    class TestGenericList
    {
      private class ExampleClass {}

      static void Main()
      {
        GenericList<int> listInt = new GenericList<int>();
        listInt.Add(1);

        GenericList<string> listString = new GenericList<string>();
        listString.Add("hello");

        GenericList<ExampleClass> listClass = new GenericList<ExampleClass>();
        listClass.Add(new ExampleClass());
      }
    }
  5. 小結
    * 使用泛型型別以{最佳化程式碼重複使用}、{型別安全和效能}。(註: 使用泛型型別的好處有: 程式碼重複使用, 型別安全及效能)
    
    * 泛型的{最常見用法是建立集合類別}。(註: 常見用法, public class List<T> {}, 建立集合類別)
    
    * .NET 類別庫包含命名空間中的數個泛型集合類別 {System.Collections.Generic} 。 
      {應該盡可能使用泛型集合}，而不是 ArrayList 命名空間中的類別 System.Collections 。
    
    * 您可以建立自己的泛型介面、類別、方法、事件和委派。
    
    * 泛型類別可限制為允許存取特定資料類型上的方法。
    
    * 泛型資料類型中所使用的類型相關資訊，可在執行階段透過反映取得。

=.net core 常用指令=
  =指令:Create a new console app=
    dotnet new console

    dotnet new console -n <專案名稱> -o .
    dotnet new console -n files-module -o .

  =指令:run console app=
    dotnet run

  =指令:Create a new WebApi app=
    dotnet new webapi --no-https

  =指令:build web api=
    dotnet build

  =指令:build web api & run web api=
    dotnet run

  =指令:連接webapi by httprepl=
    httprepl http://xxxxx

=學習途徑=  
  https://docs.microsoft.com/zh-tw/learn/browse/?resource_type=learning%20path&levels=beginner&products=dotnet

1. 使用 C# 邁出您的第一步(OK, 2021/05/26)

  # 字串串連
    1. 字串串連可讓您將較小的常值與變數字串合併為單一字串。 (註: + )
    2. 若新增中繼變數並不會增加可讀性，避免建立中繼變數。 (註: string a = "a"; string b = "b"; string temp = a + b;)

  # 字串插補
    1. 字串插補透過減少某些情況中需要的字元數目，提供比字串串連更好的改良。 (註: $"{str1} {str2}";)
    2. 您可以透過合併每個項目的符號並使用該符號作為字串範本的前置字元，來合併字串插補與逐字常值。 
      @"...", 視為逐字常值. (註: 何謂逐字常值, 就是 \n 不視為換行, 而是字面上的 '\n')
      $"{var}", 可放入字串插補.
      $@"C:\Output\{projectName}\Data"; 
        (註: 此例為什麼要加上 @, 因為裡面有 3個 \ 跳脫字元後面找不到對應, 會出現錯誤)
        (註: 此例為什麼要加上 $, 因為裡面有 {字串插補})
        (註: How to Display Unicode on Console ? 
            加上這段碼 "Console.OutputEncoding = System.Text.Encoding.UTF8;" )
        (註: 逸出字元 = \跳脫字元 + 對應逸出字元, 例: \t = tab, \n = 換行, \\ = 加上1個\字元 )

  # 數值
    1. 您可對數字執行如加法的數學運算。
    2. 字串串連和加法都會使用加號 +。 這稱為「對運算子進行多載」，且編譯器會根據其正在運算的資料類型推斷出適當的使用方式。
    3. 在可以的情況下，C# 編譯器會在開發人員明顯基於顯示目的想要串連代表數字的字串時，將 int 隱含地轉換為 string。
    4. 使用括弧來定義運算順序，以明確地告知編譯器，我們想要在執行其他運算之前先執行特定運算。
      (!!: 您應該避免在單一程式碼中同時執行{數值計算}和{字串串連}。 此處的重點在於協助您了解如何從編譯器角度來檢視運算子與運算元。)

  # 數值運算
    1. int 無法存入小數點. ex. int i = 5 / 2 = 2 (OK)
    2. decimal 才能存入小數點. ex. decimal d  = 7 / 5.0m; (OK)
    3. 如何保留計算後的小數值? 
       (註: 商 (指派運算子的左側) 必須是 decimal 類型，且 被除數「或」除數也必須是 decimal 類型 (「或是」兩者皆為該類型)。)
      OK:
        decimal decimalQuotient = 7 / 5.0m;
        decimal decimalQuotient = 7.0m / 5.0m;
        decimal decimalQuotient = (decimal)7 / 5; (註: 對 int 轉型為 decimal)
      Error:
        int decimalQuotient = 7 / 5.0m; (註: 只留下整數, 因為int 無法存入小數點)
        int decimalQuotient = 7.0m / 5; (註: 只留下整數, 因為int 無法存入小數點)
        int decimalQuotient = 7.0m / 5.0m; (註: 只留下整數, 因為int 無法存入小數點)
        decimal decimalQuotient = 7 / 5; (註: 只留下整數, 因為 int / int 還是整數)
    4. % 可求出 (int) 除法的餘數 (註: 型態是 int )
    5. 運算順序(PEMDAS)
      * 括號 ()
      * 指數 System.Math.Pow(), 求指數函數
      * 乘 * & 除 /
      * 加 + & 減 -

    6. 小結  
      * 使用 +、-、* 與 / 等運算子來執行基本數學運算。

      * 將兩個 int 值相除將會導致系統截斷小數點之後的任何值。 
        !!注意: 若要保留小數點之後的值，您需要先將除數或被除數 (或兩者) 從 int 轉換為浮點數 (例如 decimal)，而且商也必須是相同的浮點類型，才能避免截斷。
      
      * 執行轉換作業來暫時將值視為不同的資料類型。(例: (decimal)7 | 7.0m)
      * 使用 % 運算子來擷取相除後的餘數。(例: 5 % 3 = 2)
      * 運算順序將會遵循 PEMDAS 縮寫的規則。

  # 遞增和遞減值
    1. 小結    
      * 使用 +=、-=、*=、++ 與 -- 之類的複合指派運算子來執行如遞增或遞減的數學運算，然後將結果指派到原始變數中。
      * 根據遞增和遞減運算子是位於運算元之前或之後，它們的執行方式將會有所不同。
        ++value , 加1後再取值
        value++ , 先取值再加1

  # 呼叫方法(接受參數, 使用.NET Class Library)
    1. .NET Class Library 簡介
      * 類別是方法的容器
      * 資料類型(data type)都是 .NET Class Library 的一部分
      * 什麼是命名空間(namespace)？
          (註: 可想像成家族名稱, 避免與其他同名同姓的方法發生衝突)
          (註: 命名空間可以協助確保不會有任何類別具有相同的「全名」)

    2. 小結    
      * .NET Class Library 能為我們提供豐富的功能，且我們僅需參考所需的類別和方法就能使用它們。
      * 連資料類型都是 .NET Class Library 的一部分。 C# 單純只是針對那些資料類型提供別名。
      * 「命名空間」能防止 .NET Class Library 中類別名稱間的命名衝突。

  # 呼叫 .NET Class Library 中不同類型的方法
    1. 具狀態與無狀態方法
      * 具狀態方法, 要宣告物件(又稱執行個體 instance)來儲存狀態.
      * 無狀態方法, 因不保留狀態, 所以直接使用即可. (註: 不用先宣告, 再使用.)
        又稱靜態方法(static method). 
        (例: Console.Write("123");)
        (例: PizzaService.GetAll(); 因為 PizzaService 宣告為無狀態類別, GetAll() 也是無狀態方法, 所以能直接使用.)
    
    2. 在呼叫某個類別的方法之前，要如何判斷是否需要先建立該類別的執行個體？
      * 查參考文件
      * 直接尋找範例
    
    3. 小結    
      * 若要呼叫 .NET Class Library 中類別的方法，您會使用 ClassName.MethodName() 格式，
        其中 . 符號是用來存取定義於類別上之方法的成員存取運算子，而 () 符號則是方法叫用運算子。

      * 呼叫無狀態方法時，您不需要先建立其類別的新執行個體。
      * 呼叫具狀態方法時，您需要建立類別的執行個體，並存取物件上的方法。
      * 使用 new 運算子來建立類別的新執行個體。
      * 類別的執行個體稱為「物件」。

  # 使用傳回值與輸入參數
    1. 傳回值(return)
      * void 無回傳
      * return DataType (OK)
      * return ClassObject (OK)
    
    2. 傳入參數(input parameter)
      * 輸入參數是使用{資料類型}來定義。 我們無法傳遞不同資料類型的值作為輸入參數，因為方法將無法運作.
      * {類型檢查} 是 C# 與 .NET 使用者用來確認資料類型，以防止終端使用者遇到例外狀況的其中一種方法。
      * {方法簽章} 是針對每個輸入參數與資料類型所定義的輸入參數。
    
    3. 多載方法(Overload)
      * 多載方法 是以多個{方法簽章}定義。

    4. 小結    
      * 方法可能不會接受任何參數，或是接受多個參數，這取決於它們的設計與實作方式。 在傳遞多個輸入參數時，請以 , 符號來分隔它們。
      * 方法可能會在完成其工作時傳回值，也可能不會傳回任何內容 (void)。
      * 多載方法支援數個方法實作，每個實作都會有唯一的方法簽章 (輸入參數的數目，以及每個輸入參數的資料類型)。
      * Intellisense 可以協助您更迅速地撰寫程式碼。 它能針對方法提供快速參考、其傳回值、其多載版本，以及其輸入參數的類型。
      * docs.microsoft.com 是您想要了解 .NET Class Library 中方法運作方式時的「信任來源」。

  # 條件判斷式(if)
    1. 小結  
      * 使用 if 陳述式來為程式碼邏輯設定分支。 
        如果 if 決策陳述式的布林運算式等於 True，則將執行其程式碼區塊中的程式碼。 
        否則，執行階段將略過此程式碼區塊，並繼續執行此程式碼區塊後面的下一行程式碼。
      * 布林運算式是任何會傳回布林值的運算式。
        布林運算子將比較其左邊和右邊的兩個值，以進行相等、比較等操作。
      * 程式碼區塊會以大括弧 { } 來定義。 它會收集應視為單一單位的程式碼。
      * 邏輯 AND 運算子 && 會彙總兩個運算式，
        如此一來，這兩個子運算式都必須為 True，整個運算式才為 True。
      * 邏輯 OR 運算子 || 會彙總兩個運算式，
        如此一來，若任一個子運算式為 True，則整個運算式即為 True。

  # 條件判斷式(else if & else)
    1. 小結    
      * if-else 可讓您測試條件，以在布林運算式為 True 時執行程式碼，並在布林運算式為 False 時執行不同的程式碼。
      * 您可以巢狀處理 if 陳述式來縮小可能的條件。 
        不過，您應該考慮改為使用 if-elseif-else 陳述式。
        使用 elseif 來建立多個獨佔條件。
      * else 是選擇性的，但一律需最後出現。

  # 使用 C# 中的陣列及 foreach 陳述式來儲存及逐一查看資料序列
    1. 陣列基本知識
    
    2. 什麼是陣列
      * 陣列是個別資料元素的序列，可透過單一變數名稱存取。 
      * 您會使用以零為基礎的數值索引來存取陣列中的每個元素。
    
    3. 宣告陣列
      * 陣列是特殊類型的變數，可保存相同資料類型的多個值
      
      * 宣告語法，必須同時指定資料類型和陣列大小。
          string[] aryString = new string[3];
          var aryString = new string[] {"a","b","c"};
      
      * 將值指派至陣列的元素, 
          索引值以 0 開始.
      
      * 將陣列初始化
          string[] aryString = {"a","b","c"};
      
      * 取得陣列的大小(使用 Length屬性 )
          aryString.Length;

    4. 小結    
      * 陣列是能保存相關資料元素序列的特殊變數。
      * 您應該記住陣列變數宣告的基本格式。
      * 存取陣列的每個元素，以透過用方括弧括住、以零為基礎的索引來設定或取得其值。
      * 如果您嘗試存取超出陣列界限的索引，將會收到執行階段例外狀況。
      * Length 屬性能讓您以程式設計方式判斷陣列中元素的數目。

  # foreach 陳述式
    1. 使用 foreach 在陣列中執行迴圈
      foreach (string s in aryString)
      {
        Console.Write(s);
      }
    2. 小結    
      * 使用 foreach 陳述式來逐一查看陣列中的每個元素，針對陣列中的每個元素執行相關聯的程式碼區塊一次。
      * foreach 陳述式會將陣列中目前元素的值設定至暫時變數，您可在程式碼區塊的本文中使用它。
      * 使用 ++ 遞增運算子來對變數的目前值新增 1。

  # 使用 C# 中的慣例、空白字元與註解，建立可讀取的程式碼(增加程式碼的可讀性與品質)

  # 選擇遵循規則與慣例的變數名稱
    1. 變數名稱規則
      * 變數名稱只能包含{英數字元}與{底線字元}。 
        不允許使用井字號 #、破折號 - 與貨幣符號 $ 等特殊字元。
      * 變數名稱的{開頭必須是字母或底線}，而{不是數字}。 
        !! 注意: 開發人員會針對特殊用途使用底線( _ )，因此{請試著暫時不要使用它(底線字元)}。
      * 變數名稱{「不得」為 C# 關鍵字}。 例如，不允許使用下列變數名稱宣告：float float; 或 string string;。
      * 變數名稱會{區分大小寫}，這表示 string MyValue; 與 string myValue; 是兩個不同的變數。

    2. 變數名稱慣例    
      * 變數名稱應該使用 {駝峰式大小寫}，這是一種撰寫樣式，
        它會在第一個單字開頭使用小寫字母，並在每個後續單字的開頭都使用大寫字母。 
        例如：string thisIsCamelCase;。
      * 變數名稱在您的應用程式中應該是{描述性且有意義的}。 
        您應該針對您變數所保留的資料種類，選擇其名稱。
      * 變數名稱應該是一或多個完整的單字附加在一起。 
        {請勿使用縮寫}，因為讀取您程式碼的其他人可能不清楚該變數的名稱。
      
      * !! 注意: {變數名稱不應包含變數的資料類型}。 
        您可能會看到一些使用樣式 (例如 string strMyValue;) 的建議。 
        這是多年前常用的樣式。 不過，{{{大部分的開發人員都不再遵循這個建議}}}。

  # 練習 - 為您的程式碼加上註解
    1. 程式碼註解 //    
      * 當您想要為程式碼片段的意圖留下一個備註時。 當您撰寫一組特別具挑戰性的程式碼指令時，這有助於描述用途或思考過程。 您的未來將會感謝您。
      * 當您想要暫時移除應用程式中的程式碼以嘗試不同的方法，但您還不確信新的構想是否有效時。 您可以將程式碼註解化、撰寫新的程式碼，然後在您確信新程式碼以您想要的方式運作之後，就可以安全地刪除舊的程式碼 (已加上註解的程式碼)。
      * 加入如 [TODO] 的訊息，以提醒您之後查看特定的程式碼片段。 雖然您應該謹慎使用，但這是有效的原因。 當您讀取一行可能會有顧慮的程式碼時，您可能正在使用另一個功能。 您可以將其標示為稍後進行調查，而不是忽略新的顧慮。 Visual Studio IDE 甚至會提供一個稱為「工作清單」的視窗，協助您識別您在程式碼中留下的 TODO 訊息。
      
      * !! 注意: 為{更高層級的構想使用註解}，而{不是加入個別程式碼行運作方式的相關註解}, 因為程式員常常會改碼, 忘記改註解.
        !! 利用 [多行註解], 在函式最上面說明構想.
    
    2. 多行註解 /* 停用三行或多行使用 */

  # 練習 - 使用空白字元, 增加可讀性及段落感
    1. !! 注意(建議調整): 將左大括號和右大括號移至其本身的行，以改善間距
        Random dice = new Random();

        int roll1 = dice.Next(1, 7);
        int roll2 = dice.Next(1, 7);
        int roll3 = dice.Next(1, 7);

        int total = roll1 + roll2 + roll3;
        Console.WriteLine($"Dice roll: {roll1} + {roll2} + {roll3} = {total}");

        if ((roll1 == roll2) || (roll2 == roll3) || (roll1 == roll3)) 
        {
            if ((roll1 == roll2) && (roll2 == roll3)) 
            {
                Console.WriteLine("You rolled triples!  +6 bonus to total!");
                total += 6; 
            } 
            else 
            {
                Console.WriteLine("You rolled doubles!  +2 bonus to total!");
                total += 2;
            }
        }
    
    2. 小結
      * 謹慎地使用空白字元，提升程式碼的可讀性。
      * 使用換行符號建立空行來分隔程式碼的語句。 語句是由類似或共同運作的程式碼行所組成。
      * 使用換行符號分隔程式碼區塊符號，使其位於自己的程式碼行上。
      * 使用 tab 鍵，將程式碼區塊與相關聯的關鍵字對齊。
      * 將程式碼區塊內的程式碼縮排，以顯示擁有權。

2. 使用 C# 建置 .NET 應用程式 
  # 使用 ASP.NET Core 建立 Web API (CRUD) (2021/05/26, OK)
    1. REST in ASP.NET Core
      * REST 是 build web service的架構模式
      * GET - 從 Web service 存取資料.
      * POST - 在 Web service 上新增項目.
      * PUT - 在 Web Service 上更新項目.
      * DELETE - 在 Web Service 上刪除項目.
      * PATCH - 在 Web Service 上修正資料, 通常不會在同一支程式上使用.
    
    2. RESTful APIs 是由下列項目所組成的:
      * 1 組基本網址(a base URI)
      * HTTP 方法, 例: GET, POST, PUT, DELETE, PATCH.
      * 資料型態, 例: JSON or XML.
    
    3. 另外, 會搭配網址路由來區隔功能, 
      例1: http://localhost:5000/order 會路由至 OrderController
      例2: http://localhost:5000/Pizza 會路由至 PizzaController

    * 利用.NET Core建立 API的好處
      1. Simple serialization(物件快速序列化為JSON)
      2. Authentication and authorization(認證及授權)
      3. Routing alongside your code(自動路由至對應程式碼)
      4. HTTPS by default(預設HTTPs, 基於點對點的加密, 自動產生測試用憑證)
      5. Share code & knowledge with .NET apps(程式碼可以相互分享)

    * 利用 .NET HTTP REPL 對 WebAPI 作測試
      0. WebAPI 並不適合利用 瀏覽器 作測試, 因為它不是回傳 HTML.
      1. REPL = Read-Eval-Print Loop.
      2. REPL = command line 的 測試互動環境
    
    * 如果要建立HTML based Web application ? 
      In order to serve a traditional HTML based web application with ASP.NET Core, 
      使用 Razor Pages or MVC 是比較好的作法.

    * 練習 - 新增 Web API 專案
      
      =新增專案=
        1. 新增 Web API 專案資料夾 (ContosoPizza)
        2. 切換至 專案資料夾 (cd ContosoPizza)
        3. dotnet new webapi --no-https (註: 新增 WEBApi 專案, 先關閉 HTTPS 功能)
        
        4. !! 注意: 放到正式環境前, 必須設定 configure the ASP.NET Core HTTPS development certificate
          參考手冊: https://docs.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-5.0&tabs=visual-studio#trust-the-aspnet-core-https-development-certificate-on-windows-and-macos
        
        5. 檢視下列重要檔案功能
          * Controllers/ 放置公開的端點類別檔
          * Program.cs   內含1個 Main 方法, 這是APP的進入點
          * Startup.cs   設定服務 & app的 HTTP request pipeline.
          * ContosoPizza.csproj 內含專案相關設定.
      
      =建置和測試執行=
        1. dotnet build (註: 第1次建置, 成功後生出bin & obj兩個資料夾)
        2. dotnet run (註: 測試執行. 之後儘管程式碼修改, dotnet run 能同時完成編譯及執行作業)
        3. open browser 連接至 http://localhost:5000/weatherforecast 回傳 JSON 結果.

        4. dotnet tool install -g Microsoft.dotnet-httprepl (註: 開另一個CMD, 安裝 REPL 測試工具 )
            安裝成功訊息: 
              您可以使用下列命令來叫用工具: httprepl
              已成功安裝工具 'microsoft.dotnet-httprepl' ('5.0.2' 版)。
          4.1. httprepl http://localhost:5000 (註: 利用 httprepl 連結 WEBAPI)
            連接成功訊息:
              (Disconnected)> connect http://localhost:5000
              Using a base address of http://localhost:5000/
              Unable to find an OpenAPI description
              For detailed tool info, see https://aka.ms/http-repl-doc

              http://localhost:5000/>
          4.2. ls (註: 列出 OpenAPI 項目)
          4.3. cd (註: 切換路由)
          4.4. get (註: 送出查詢, 並列印回傳結果)
          4.4. exit (註: 離開目前session.)

      =(重要章節)ASP.NET Core Web API Controllers=
        1. 新增 Controllers前, 先檢視範例 WeatherForecastController
          
          * :ControllerBase , 內含建立WEB API的許多基本功能, 用來控制 HTTP requests.
          
          * API Controller 類別屬性, 有兩個重要類別屬性
            > [ApiController]         註: [ApiController] enables opinionated behaviors that make it easier to build web APIs.
            > [Route("[controller]")] 註: [Route] defines the routing pattern [controller]
            
            > [Route("api/[controller]")] 註: 另一種路由規則, http://localhost:5000/api/controllerName
      

          * Providing Weather results with the Get() method
            > [HttpGet]
            > public IEnumerable<WeatherForecast> Get() 註: 就是此公開方法, 提供回傳值.

            > [HttpGet("{id}")] 註: 另一種有傳入參數的GET型態.

      =練習-新增資料存放區(Add a data store, Model Class)=
        1. Create a pizza model (Model Class)
        2. Add data service (新增1個 in-memory pizza data services)
            註: 使用 泛型List<Pizza> 儲存Pizza資料, 利用 LINQ 異動泛型List<Pizza>內的資料.
        3. dotnet build
            註: 檢查是否有錯誤.

      =練習-新增Controller(Add a controller)=
        1. ActionResult or IActionResult 的差別?
          ActionResult 僅能回傳受限類型, 另外它也是IActionResult實作結果.
          IActionResult 回傳類型不受限, 例如: 下列回傳結果都是
            * ContentResult
            * EmptyResult
            * FileResult
            * HttpStatusCodeResult
            * JavaScriptResult
            * JsonResult
            * RedirectResult
            * RedirectToRouteResult 

      =ASP.NET Core 的 CRUD作業=

      =練習-實作CRUD作業=

      =總結=

  # 處理 .NET 應用程式中的檔案與目錄 (2021/06/01, OK)

    {小結}
      
      * {Directory.EnumerateDirectories} and {Directory.EnumerateFiles} 
        accept a parameter that enables you to specify a search condition for names to return, 
        and a parameter to recursively traverse all child directories.
        
        註: 好用函式, 搜尋符合指定條件 & 是否遍尋子階資料夾 的資料夾及檔案.
      
      * {System.Environment.SpecialFolder} is an enumeration that enables you to access system-defined folders, 
        such as the desktop or user profile, in a cross-platform manner without having to memorize the exact path for each operating system.

        註: 指定專用資料夾, 且會依系統別自動對應.

      * If you need to parse other file types, {check out the packages on nuget.org}. 
        For example, you can use the {CsvHelper} package for .csv files.
        You can use the {Newtonsoft} package for .json files.

        註: 解析資料時, 可先至 nuget 尋找是否有合適的{解析器}.

    {Work with the file system}
      
      using System.IO;

      * 可利用此命名空間內的資料型態, 讀取、寫入、同步及非同步資料串流及檔案.
      * 列出所有資料夾, Directory.EnumerateDirectories("folderPath");
      * 列出資料夾的所有檔案, Directory,EnumerateFiles("folderPath");
      * 列出資料夾(含子資料夾)特定檔案, Directory.EnumrateFiles("stores", "*.txt", SearchOption.AllDirectories);

    {Clone the project}
      
      * 複製所需專案資料檔及資料夾.
        git clone https://github.com/MicrosoftDocs/mslearn-dotnet-files && cd mslearn-dotnet-files
      
      * 指令: 新增Console專案
        dotnet new console -n files-module -o .

      * 複製範例資料夾(stores)到Console專案內.
      
    {Work with file paths in .NET}

      * 確認目前資料夾路徑, Directory.GetCurrentDirectory()

    {Work with special directories}

      * 根據不同作業系統或環境, 自動調整對應參數,  System.Environment.SpecialFolder.*
        string docPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments); //回傳微軟系統的"我的文件夾"

    {Work with paths}

      * Path 類別是放在 System.IO 內.
      
      * !!注意: Path 只會協助組合出路徑, 至少路徑是否存在, 還要實際測試才知道.
      
      * 組合正確路徑的兩種方法 => .NET 自動判別系統, 加上正確的分隔符號. ex. 微軟用 'stores/201' 蘋果用 'stores\201'.
        
        1. Path.DirectorySeparatorChar
          string folderPath = $"stores{Path.DirectorySeparatorChar}201"; // output: stores/201

        2. Path.Combine("stores","201");
          string folderPath = Path.Combine("stores","201"); // same output: stores/201

      * 取出檔案副檔名, Path.GetExtension("sales.json"); // output: .json {Determine filename extensions}

      * 從檔案或資料夾取得任何你所知道的資訊. by Path.DirectoryInfo(<directoryPath>), by Path.FileInfo(<filePath>)

        string fileName = $"stores{Path.DirectorySeparatorChar}201{Path.DirectorySeparatorChar}sales.json"; // stores/201/sales.json

        FileInfo info = new FileInfo(fileName);
        info.FullName
        info.Directory
        info.Extension
        info.CreateTime...

    {Create files and directories}

      * Directory 類別, 用來新增、刪除、複製和移動 {資料夾}...
      * File 類別, 用來新增、刪除、複製和移動 {檔案}...

      * Create directories
        
        Directory.CreateDirectory(Path.Combine(Directory.GetCurrentDirectory(), "stores", "201", "newDir"));
        
        > Directory.CreateDirectory() 不會失敗, 如果全路徑或部分路徑不存在, 它會自動新增補足.

      * 確認資料夾是否存在 ?

        bool isDirExists = Directory.Exists(filePath);

      * 新增檔案

        File.WriteAllText(filePath, "data to be written.");

        File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory(), "stores", "201", "textOutput.txt"), "Hello 2021/06/01");

        > 檔案不存在, 新增檔案並寫檔.
        > 檔案已存在, 覆蓋檔案內容.

    {Read and Write to files}

      * Read data from files. 從檔案讀取資料

        File.ReadAllText(Path.Combine("stores", "201", "sales.json"));
      
      * Parse data in files. 解析檔案內資料

        > 解析 JSON 檔案, 常用 Json.NET
        > 加入參考, dotnet add package Newtonsoft.Json

        using Newtonsoft.Json;

        class SalesTotal
        {
          public double Total {get;set;}
        }

        var salesJson = File.ReadAllText(Path.Combine("stores", "201", "sales.json"));
        var salesData = JsonConvert.DeserializeObject<SalesTotal>(salesJson);

        Console.WriteLine(salesData.Total);

      * 檔案格式各式各樣, 可能會碰到 .csv, 固定寬度, 或其他格式. => 最好的方式去 nuget.org 上找適合的解析工具.

      * Write data to files. 寫資料進檔.

        > File.AppendAllText(<filePath>, <fileData>); // 附加檔案資料
        > File.WriteAllText(<filePath>, <fileData>); // 寫檔案資料(直接覆蓋)

        // 寫檔案資料(直接覆蓋)
        var data = JsonConvert.DeserializeObject<SalesTotal>(Path.Combine("stores", "201", "sales.json"));
        File.WriteAllText(Path.Combine("salestotalDir", "totals.txt"), data.Total.toString());

        // 附加檔案資料
        var data = JsonConvert.DeserializeObject<SalesTotal>(Path.Combine("stores", "201", "sales.json"));
        File.AppendAllText($"salestotalDir{DirectorySeparatorChar}totals.txt", $"{data.Total}{Environment.NewLine}");

  # .NET 簡介 (2021/06/28, OK)

  # 撰寫您的第一個 C# 程式碼 (2021/06/28, OK)

  # 建立新的 .NET 專案並使用相依性(套件) (2021/06/28, OK)
    > 學習目標
      1. .NET專案初始化
      2. .NET專案, 加入套件及移除套件
      3. 管理套件的相依件, 並更新這些套件
    
    > 評估你是否需要使用套件
      1. 產出更好的程式碼, 例: 使用成熟的安全性驗證套件
      2. 節省時間, 例: 利用套件可讓你更快完成目標
      3. 可維護性, 例: 評估是否有必要自行維護或使用開放原始碼即可

    (註): 安裝前, 通常會至 https://www.nuget.org/packages/<package name>了解套件功能.

    > 安裝套件
      1. 指令: {dotnet add package <name of package>}
         例: {dotnet add package Humanizer}
      2. 指令執行後, 套件檔案會放在 所有專案都能使用的 <cached Folder> 內.
      3. 安裝 & 專案編譯後, 套件檔案會放在 <debug> 或 <release> 資料夾內.
        -| bin/
        ---| Debug/
        ------| net3.1
        --------| <files included in the dependency>

    > 尋找套件
      1. 套件可能放置在
        a. Registries(儲存庫), 例: NuGet.org 放置自己套件, 私人或公開的; 例: GitHub and Azure DevOps, 通常是私有的
        b. Files(本地檔案), 通常是自行開發&本地測試, 或是某些理由不公開.

    > NuGet 儲存庫 和 dotnet tool
    > .NET 指令工具(.NET Core CLI), 指令大致上可分為三類:
      1. 管理套件相依性, 例: 安裝, 移除, 清除, 更新..
      2. 執行程式, 協助管理程式開發流程, 例: 測試、編譯、升級移轉
      3. 撰寫和發行套件, 例: 產生壓縮套件 & 發行至儲存庫
      4. 查詢功能指令: {dotnet --help}, 列出所有指令清單

    > 如何安裝套件相依性組件(part of package)
      指令: {dotnet add package <dependency name>}

    > 如何安裝指令工具
      指令: {dotnet tool install <name of package>}

    > 如何安裝程式範本(templates)
      指令: {dotnet new -i <name of package>}
      
    > 安裝後, 列出專案內所有套件
      1. 指令: {dotnet list package} (最上層)
      1. 指令: {dotnet list package --include-transitive} (列出所有可轉移套件)
      2. The installed packages are listed in the dependencies section of your {.csproj} file
    
    > 還原套件
      0. 套件實際加入專案時間點在 {專案編譯後}.
      1. 指令(明確地): dotnet restore
      1. 指令(隱含地): dotnet new.. dotnet build.. dotnet run.., 都會將套件自動加入專案中.

    > 清理(clean up)套件
      0. 若不需要這個套件, 記得把它移除.
      0. Doing so keeps things clean. Also, dependencies take up space.
      1. 指令: {dotnet remove package <name of package>}

    > 設定專案只會取得patch(bug fix)更新
      Project檔案內, 使用下列設定
      <PackageReference Include="<package>" Version="2.7.*">

    > Semantic Version語意版本
      <Major>.<Minor>.<Patch>

      1. 套件<Major版本號>變更, 引用程式要改寫
      2. 套件<Minor版本號>變更, 通常是套件功能新增, 引用程式毋須大改, 但程式仍有故障風險.
      3. 套件<Patch版本號>變更, 通常是套件BUG修正, 引用程式毋須大改.

    > 設定專案套件版本更新規則
      0. 如果你使用很多套件, 最好先設套件更新規則. 當專案還原(restore), 編譯(build), 執行(run).
      
      {規則1} <==強烈建議使用==>
        Notation 	    Applied rule 	Description
        1.0 	            x >= 1.0 	Minimum version, inclusive
        (1.0,) 	          x > 1.0 	Minimum version, exclusive
        [1.0] 	          x == 1.0 	Exact version match
        (,1.0] 	          x ≤ 1.0 	Maximum version, inclusive
        (,1.0) 	          x < 1.0 	Maximum version, exclusive
        [1.0,2.0] 	1.0 ≤ x ≤ 2.0 	Exact range, inclusive
        (1.0,2.0) 	1.0 < x < 2.0 	Exact range, exclusive
        [1.0,2.0) 	1.0 ≤ x < 2.0 	Mixed inclusive minimum and exclusive maximum version
        (1.0) 	          invalid 	invalid(錯誤寫法)
      
      {規則2}
        6.0.* , 表示自動套用6.0.x的最新版, 例: 來源有 6.0, 6.0.1, 6.1, 要求 Version >= 6.0.*, 實際取得 6.0.1
        4.*   , 表示自動套用4.x的最新版

      {套件版本設定範例}
        <!-- Accepts any version 6.1 and later. -->
        <PackageReference Include="ExamplePackage" Version="6.1" />

        <!-- Accepts any 6.x.y version. -->
        <PackageReference Include="ExamplePackage" Version="6.*" />
        <PackageReference Include="ExamplePackage" Version="[6,7)" />

        <!-- Accepts any later version, but not including 4.1.3. Could be
            used to guarantee a dependency with a specific bug fix. -->
        <PackageReference Include="ExamplePackage" Version="(4.1.3,)" />

        <!-- Accepts any version earlier than 5.x, which might be used to prevent pulling in a later
            version of a dependency that changed its interface. However, we don't recommend this form because determining the earliest version can be difficult. -->
        <PackageReference Include="ExamplePackage" Version="(,5.0)" />

        <!-- Accepts any 1.x or 2.x version, but not 0.x or 3.x and later. -->
        <PackageReference Include="ExamplePackage" Version="[1,3)" />

        <!-- Accepts 1.3.2 up to 1.4.x, but not 1.5 and later. -->
        <PackageReference Include="ExamplePackage" Version="[1.3.2,1.5)" />

    > 檢查套件是否有新版
      1. 指令: {dotnet list package --outdated}
      
  # 使用 Visual Studio Code 偵錯工具對 .NET 應用程式進行互動式偵錯 (2021/06/29, OK)
    > 學習目標      
      1. 搭配 .NET 程式使用 Visual Studio Code 偵錯工具。
      2. 建立中斷點並逐步執行程式碼，以找出問題。
      3. 在執行的任何階段中檢查程式狀態。
      4. 倒轉呼叫堆疊，以找出例外狀況的來源。

    > 什麼是偵錯工具
      1. 將程式裝載於其本身的執行處理序中，或作為獨立處理序連結至執行中的程式(例.NET)來執行
      2. 類型: 從Command Line執行, 從圖形化使用者介面執行

    > 偵錯工具的兩大重要功能
      1. 對程式執行的控制。例: 暫停程式並逐步執行
      2. 觀察程式的狀態。例:變數值和函式參數
      3. 另外, 最適合用來觀察不同函式中特定變數目前的值, {監看面板}.
      4. 另外, 顯示目前在範圍內的所有變數, {變數面板}.

    > .NET 應用程式中的記錄與追蹤(使用情境)
      1. 追蹤常用於監視應用程式執行狀況，在正式上線後。(分散式應用程式直接用偵錯功能，也不容易找錯)
      2. 長期間出現的問題
      3. 多緒行緒應用程式與分散式應用程式
      4. 分散式應用程式的問題由許多元件間交互作用而產生
      5. 服務不該停止，連接偵錯工具可能導致逾時失敗
      6. 問題不一定經常發生。利用記錄和追蹤功能(低額外負荷)，在發生問題時，程式會記錄。

    > 將資訊寫入至輸出視窗(方式有3種)      
      1. System.Console (最簡單, 通常用於進行臨機操作的暫時性偵錯; 客戶用)
          一律啟用且一律寫入到主控台。
          適用於客戶可能需要在發行版本中看到的資訊。
          此偵錯程式碼通常絕對不會簽入到原始程式碼控制。
      
      2. System.Diagnostics.Trace (已上線, 找問題用)
          只有在定義 TRACE 時才會啟用。
          寫入到已連結的接聽程式，預設為 DefaultTraceListener。
          在建立將在大部分組建中啟用的記錄時，請使用此 API。
      
      3. System.Diagnostics.Debug (已上線, 程式員偵錯用)
          只有在已定義 DEBUG 時才會啟用 (在偵錯模式中)。
          寫入到已連結的偵錯工具。
          在建立將只在偵錯組建中啟用的記錄時，請使用此 API。

        Console.WriteLine("This message is readable by the end user.");
        Trace.WriteLine("This is a trace message when tracing the app.");
        Debug.WriteLine("This is a debug message just for developers.");

      註: !!輸出格式的官方建議!!
        1. 結合多個來源，產生單一資訊時 => 請使用多個 Write
        2. 單一完整資訊 => 請使用 WriteLine

    > 定義 TRACE & DEBUG 常數 (VIP, 可限定發行版本, 只有 Trace 語法生效)
      1. 預設，偵錯時期執行，會定義 DEBUG 變數。
      2. 指定，利用專案檔內屬性群組，新增 DefineConstants 項目控制。

      <!-- Debug時, 開啟 DEBUG & TRACE -->
      <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
        <DefineConstants>DEBUG;TRACE</DefineConstants>
      </PropertyGroup>
      <!-- Release時, 開啟 TRACE -->
      <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
          <DefineConstants>TRACE</DefineConstants>
      </PropertyGroup>

    > 條件式追蹤
      1. 簡單, Write() & WriteLine();
      2. 條件, WriteIf() & WriteLineIf();

      範例1:
        if (count == 0)
        {
          Debug.WriteLine("The count is 0 and this may cause an exception.");
        }
      範例2:
        Debug.WriteLineIf(count == 0 , "The count is 0 and this may cause an exception.");
      範例3:
        bool errorFlag = false;
        System.Diagnostics.Trace.WriteIf(errorFlag, "Error in AppendData procedure.");
        System.Diagnostics.Debug.WriteIf(errorFlag, "Transaction abandoned.");
        Trace.Write("Invalid value for data request");

    > 確認特定條件是否存在
      1. 利用 Assert 陳述式測試條件(放入正常值), 將條件放入 Assert 引數內.
        若 判斷結果為 true, 則不會執行任何動作.
        若 判斷結果為 false, 則判斷提示會失敗. (使用debug組建執行時, 程式會進入中斷模式.)
      2. Debug.Assert(condition, message) & Trace.Assert(condition, message), 都能使用.
        但 Debug.Assert程式碼不會放入 Relase版本 中, 故不會增加Relase版本程式碼大小或減緩程式執行速度.
      3. Debug.Assert(condition, message)方法, 可用來測試程式碼正確的情況下, 判斷結果應為 True 的條件.
        例:
          static int IntDivide(int dividend, int divisor)
          {
              //除數不得為0
              System.Diagnostics.Debug.Assert(divisor != 0, $"nameof(divisor) is 0 and will cause an exception.");
              return dividend / divisor;
          }

      4. !!注意!! 
        當您使用 System.Diagnostics.Debug.Assert 時，
        請確定移除判斷提示時，判斷提示中的任何程式碼都不會變更程式的結果。 
        否則，您可能會不小心引進了只會出現在程式發行版本中的錯誤 (Bug)。 
        特別注意包含函式或程序呼叫的判斷提示。

    > 練習- 記錄和追蹤(專案名稱: DotNetDebugging)
      1. 寫入偵錯主控台 (常用於"觀察計算過程")
        Debug.WriteLineIf(sum == 1, $"sum is 1, n1 is {n1}, n2 is {n2}");

      2. 使用判斷提示(Assert)檢查條件 (常用於"條件是否如預期發生.", 不如預期時，停止執行中程式)
        // If n2 is 5 continue, else break.
        Debug.Assert(n2 == 5, "The return value is not 5 and it should be.");
        return n == 0 ? n1 : n2;

      3. 執行測試1, 在不進行偵錯情況執行程式{cmd: dotnet run} , 結果如何?
        A: 請注意，在判斷提示失敗並將資訊記錄到應用程式輸出之後，應用程式即會終止。
          Process terminated. Assertion failed.
          The return value is not 5, actual return is 8
            at DotNetDebugging.Program.Fibonacci(Int32 n) in C:\Projects_C#\DotNetDebugging\Program.cs:line 38
            at DotNetDebugging.Program.Main(String[] args) in C:\Projects_C#\DotNetDebugging\Program.cs:line 10

      4. 執行測試2, 在{發行設定}下執行程式{cmd: dotnet run --configuration Release}
        A: 應用程式已成功執行到完成，因為我們已不再處於 Debug 設定中。
        註: 重點在於 {定義 TRACE & DEBUG 常數 (VIP, 可限定發行版本, 只有 Trace 語法生效)}

3. 在 C# 中處理資料
  # 在您的 C# 程式碼中選擇正確資料類型 (2021/06/30, OK)

    > 整數型別 (sbyte, short, int, long / byte, ushort, uint, ulong)
      1. 整數型別是簡單的實值資料類型，可保存整數。
      2. 其中有帶正負號及不帶正負號的資料類型，帶正負號的實值型別會使用1位元儲存其值為正數或負數。
      3. 能利用數值類型的 MaxValue & MinValue 屬性來評估數值能否容納在資料型態內。

    > 評估浮點數類型
      1. float & double 以 2進位 格式儲存(取實際值的大約值); decimal 以 10進位 格式儲存(取精確值).
      2. 案例1: 計算遊戲爆炸範圍，取大約值即可，所以用 float or double即可.
      3. 案例2: 財務運算，取精確值才行，應使用 decimal.
      4. E = 科學符號 = 乘於10的幾次方，例: 5E+2 = 5 * 10^2 = 5 * 10 * 10 = 5乘於10的2次方
      5. 浮點數是實值資料類型，可保存小數。
      6. 選擇正確的浮點數考慮項目: 最大值、最小值；2進位或10進位儲存；精確度要求
      7. 浮點數十分龐大時，會利用 E 科學符號表示
      8. 編譯器和執行階段處理 decimal 的方式，與處理 float 或 double 的方式有基本差異，尤其是在判斷數學運算所需的正確性程度時。

    > 參考型別與實值型別的差異
      0. 參考型別的類型: {陣列}, {類別}和{字串}都是.
      1. 參考型別: 參考型別變數會將其值儲存在稱為「堆積」的不同記憶體區域中。 堆積是同時在作業系統上執行的許多應用程式所共用記憶體區域。
      2. 參考型別 保存可較大的值，堆疊內放的是實際值的參考位址。
      2. 使用 new 運算子來建立參考類別的新執行個體，並將其位址傳回至變數。
      3. 實值型別: 實值型別變數會將其值直接儲存在稱為「堆疊」的儲存體區域。 堆疊是配置到目前正在 CPU 上執行程式碼的記憶體 (也稱為堆疊框架或啟用框架)。 當堆疊框架完成執行時，堆疊中的值便會移除。
      4. 實值型別 保存可較小的值，它直接把值放在堆疊內。
      5. 實值型別的類型: {整數}, {浮點數}, {字元char}, {結構}, {列舉}。所以實值型別只能儲存數字(X)
      
    > 資料類型的常用慣例
      {一般}
        1. int, 用於大多數的整數
        2. decimal, 用於表示貨幣的數字
        3. bool, 用於 True or False 值
        4. string, 用於英數值
      {特殊}
        5. byte, 用於處理不同字元集的編碼資料
        6. double, 用於幾何或科學用途, 例: 涉及動作的遊戲
        7. System.StringBuilder, 用於從許多常數或其他變數建置單一字串
        8. System.DateTime, 用於特定日期和時間值
        9. System.TimeSpan, 用於一段範圍的年/月/日/時/分/秒/毫秒

  # 使 C# 中的轉型和轉換技術轉換資料類型
  # 使用 C# 中的協助程式方法在陣列上執行作業
  # 設定用於在 C# 中顯示之英數字元資料的格式

4. 使用 C# 新增邏輯到您的應用程式
  # 

-----------------------------
  2. Create a Web Service  
    2.1. 存取Input from web browser
    2.2. Convert to JSON Object and Return.

  1. 泛型使用(of T)